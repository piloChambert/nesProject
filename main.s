;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_entities
	.importzp	_FrameCount
	.importzp	_InputPort1
	.importzp	_VRAMUpdateReady
	.importzp	_Scroll
	.import		_WaitFrame
	.import		_bankswitch
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_tile
	.export		_tileIdx
	.export		_sprites
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_copyBgLine
	.export		_fillBackground
	.export		_playerSpriteFrames
	.export		_drawMetaSprite
	.export		_playerUpdate
	.export		_main

.segment	"RODATA"

_PALETTE:
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$22
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
_playerSpriteFrames:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$7F

.segment	"BSS"

_entities:
	.res	72,$00
.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_tile:
	.res	1,$00
_tileIdx:
	.res	1,$00
.segment	"BSS"
.segment	"OAM"
_sprites:
	.res	256,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ copyBgLine (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyBgLine: near

.segment	"CODE"

;
; void copyBgLine(uint8_t line) {
;
	jsr     pusha
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     #$00
L0416:	sta     _tile
	cmp     #$40
	bcs     L02D2
;
; tileIdx = map[line * 16 + ((tile & 0x1F) >> 1)] << 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _tile
	and     #$1F
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	lda     #$00
	adc     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	asl     a
	sta     _tileIdx
;
; if(tile & 0x1) {
;
	lda     _tile
	and     #$01
	beq     L0414
;
; ++tileIdx;
;
	inc     _tileIdx
;
; if(tile >= 32) {
;
L0414:	lda     _tile
	cmp     #$20
	bcc     L0415
;
; tileIdx += 0x10;
;
	lda     #$10
	clc
	adc     _tileIdx
	sta     _tileIdx
;
; PPU.vram.data = tileIdx;
;
L0415:	lda     _tileIdx
	sta     $2007
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     _tile
	clc
	adc     #$01
	jmp     L0416
;
; }
;
L02D2:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fillBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fillBackground: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L02EF:	lda     _i+1
	cmp     #$00
	bne     L02F6
	lda     _i
	cmp     #$0F
L02F6:	bcs     L02F0
;
; copyBgLine(i);
;
	lda     _i
	jsr     _copyBgLine
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L02F8
	inx
L02F8:	sta     _i
	stx     _i+1
	jmp     L02EF
;
; PPU.vram.address = 0x23;
;
L02F0:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0301:	lda     _i+1
	cmp     #$00
	bne     L0308
	lda     _i
	cmp     #$40
L0308:	bcs     L0302
;
; PPU.vram.data = 0x55;
;
	lda     #$55
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L030A
	inx
L030A:	sta     _i
	stx     _i+1
	jmp     L0301
;
; PPU.vram.address = 0x28;
;
L0302:	lda     #$28
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L0314:	lda     _i+1
	cmp     #$00
	bne     L031B
	lda     _i
	cmp     #$0F
L031B:	bcs     L0315
;
; copyBgLine(15 + i);
;
	lda     _i
	clc
	adc     #$0F
	jsr     _copyBgLine
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L031D
	inx
L031D:	sta     _i
	stx     _i+1
	jmp     L0314
;
; }
;
L0315:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ drawMetaSprite (unsigned char, unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMetaSprite: near

.segment	"CODE"

;
; uint8_t drawMetaSprite(uint8_t id, uint8_t x, uint8_t y, const uint8_t *data) {
;
	jsr     pushax
;
; const uint8_t *ptr = data;
;
	jsr     pushw0sp
;
; while(*ptr != 127) {
;
	jmp     L0349
;
; sprites[id].x = x + *(ptr++);
;
L0347:	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L034F
	inx
L034F:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$03
	jsr     staspidx
;
; sprites[id].y = y + *(ptr++);
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0354
	inx
L0354:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; sprites[id].tile_index = *(ptr++);
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0359
	inx
L0359:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	iny
	jsr     staspidx
;
; sprites[id].attributes = *(ptr++);
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L035E
	inx
L035E:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	ldy     #$02
	jsr     staspidx
;
; id++;
;
	ldy     #$06
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
;
; while(*ptr != 127) {
;
L0349:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$7F
	jne     L0347
;
; return id;
;
	ldy     #$06
	ldx     #$00
	lda     (sp),y
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ playerUpdate (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerUpdate: near

.segment	"CODE"

;
; void playerUpdate(uint8_t id) {
;
	jsr     pusha
;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L0418
;
; if (entities[id].vy > -6) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L0367
	eor     #$80
L0367:	jpl     L0419
;
; entities[id].vy -= 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
;
; else if(InputPort1 & BUTTON_DOWN) {
;
	jmp     L0419
L0418:	lda     _InputPort1
	and     #$04
	beq     L036C
;
; if (entities[id].vy < 6) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L0371
	eor     #$80
L0371:	jpl     L0419
;
; entities[id].vy += 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$01
	jsr     staspidx
;
; } else if(entities[id].vy > 2) {
;
	jmp     L0419
L036C:	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0379
	eor     #$80
L0379:	bpl     L0376
;
; entities[id].vy -= 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[id].vy < -2) {
;
	jmp     L0419
L0376:	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L0381
	eor     #$80
L0381:	bpl     L037E
;
; entities[id].vy += 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L0419
;
; entities[id].vy = 0;
;
L037E:	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$05
	sta     (ptr1),y
;
; if(InputPort1 & BUTTON_LEFT) {
;
L0419:	lda     _InputPort1
	and     #$02
	beq     L041A
;
; if (entities[id].vx > -6) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L038E
	eor     #$80
L038E:	jpl     L03AA
;
; --entities[id].vx;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	sec
	sbc     #$01
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L0417
L041A:	lda     _InputPort1
	and     #$01
	beq     L0392
;
; if (entities[id].vx < 6) {
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L0397
	eor     #$80
L0397:	jpl     L03AA
;
; ++entities[id].vx;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$04
	lda     #$01
	clc
	adc     (ptr1),y
;
; } else if(entities[id].vx > 2) {
;
	jmp     L0417
L0392:	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L039E
	eor     #$80
L039E:	bpl     L039B
;
; entities[id].vx -= 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[id].vx < -2) {
;
	jmp     L03AA
L039B:	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L03A6
	eor     #$80
L03A6:	bpl     L03A3
;
; entities[id].vx += 2;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L03AA
;
; entities[id].vx = 0;
;
L03A3:	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
L0417:	sta     (ptr1),y
;
; entities[id].x += entities[id].vx;
;
L03AA:	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	ldy     #$04
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$02
	jsr     staspidx
;
; entities[id].y += entities[id].vy;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	ldy     #$04
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$03
	jsr     staspidx
;
; drawMetaSprite(0, entities[id].x, entities[id].y, playerSpriteFrames[(FrameCount >> 2) & 0x01]);
;
	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	tax
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	and     #$01
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jsr     _drawMetaSprite
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L03C6:	lda     _i+1
	cmp     #$00
	bne     L03CE
	lda     _i
	cmp     #$20
L03CE:	bcs     L03C7
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L03C6
	inc     _i+1
	jmp     L03C6
;
; bankswitch(0);
;
L03C7:	lda     #$00
	jsr     _bankswitch
;
; fillBackground();
;
	jsr     _fillBackground
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; entities[0].x = 32;
;
	lda     #$20
	sta     _entities+2
;
; entities[0].y = 128;
;
	lda     #$80
	sta     _entities+3
;
; entities[0].vx = 0;
;
	lda     #$00
	sta     _entities+4
;
; entities[0].vy = 0;
;
	sta     _entities+5
;
; entities[0].health = 255;
;
	lda     #$FF
	sta     _entities+6
;
; entities[0].update = (void (*)(uint8_t))playerUpdate;
;
	lda     #<(_playerUpdate)
	sta     _entities
	lda     #>(_playerUpdate)
	sta     _entities+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; WaitFrame();
;
L03F9:	jsr     _WaitFrame
;
; if(FrameCount > 0x30) {
;
	lda     _FrameCount
	cmp     #$31
	lda     #$00
	bcc     L041C
;
; if(Scroll > 0) {
;
	lda     _Scroll
	ora     _Scroll+1
	beq     L0400
;
; --Scroll;
;
	lda     _Scroll
	sec
	sbc     #$01
	sta     _Scroll
	bcs     L0404
	dec     _Scroll+1
;
; if(Scroll == 255) {
;
L0404:	lda     _Scroll+1
	bne     L040A
	lda     _Scroll
	cmp     #$FF
	bne     L040A
;
; Scroll = 239;
;
	ldx     #$00
;
; } else {
;
	jmp     L041E
;
; Scroll = 256 + 239;
;
L0400:	ldx     #$01
L041E:	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; FrameCount = 0;
;
L040A:	lda     #$00
	sta     _FrameCount
;
; playerUpdate(0);
;
L041C:	jsr     _playerUpdate
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L03F9

.endproc

