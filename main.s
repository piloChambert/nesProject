;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_FrameCount
	.importzp	_InputPort1
	.importzp	_VRAMUpdateReady
	.importzp	_SplitEnable
	.importzp	_Scroll
	.import		_WaitFrame
	.import		_bankswitch
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_playerX
	.export		_playerY
	.export		_playerSpeedX
	.export		_playerYOffset
	.export		_relativePlayerX
	.export		_score
	.export		_spriteZero
	.export		_playerSprites
	.export		_ScoreText
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_drawStatus
	.export		_drawBackground
	.export		_main

.segment	"DATA"

_playerX:
	.word	$0000
_playerY:
	.word	$0000
_playerSpeedX:
	.byte	$00
_playerYOffset:
	.byte	$00
_score:
	.word	$152D

.segment	"RODATA"

_ScoreText:
	.byte	$53,$63,$6F,$72,$65,$2E,$00
_PALETTE:
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$22
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_relativePlayerX:
	.res	2,$00
.segment	"BSS"
.segment	"OAM"
_spriteZero:
	.res	4,$00
_playerSprites:
	.res	16,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ drawStatus (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawStatus: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x40 + 0x04;    
;
	lda     #$44
	sta     $2006
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01DD:	lda     _i+1
	cmp     #$00
	bne     L01E5
	lda     _i
	cmp     #$07
L01E5:	bcs     L01DE
;
; PPU.vram.data = ScoreText[i];
;
	lda     #<(_ScoreText)
	sta     ptr1
	lda     #>(_ScoreText)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01E7
	inx
L01E7:	sta     _i
	stx     _i+1
	jmp     L01DD
;
; }
;
L01DE:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBackground: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0xA0;
;
	lda     #$A0
	sta     $2006
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01F3:	lda     _i+1
	cmp     #$03
	bne     L01FA
	lda     _i
	cmp     #$40
L01FA:	jcs     L01F4
;
; mapX = (i & 0x1F) >> 1;
;
	lda     _i
	ldx     #$00
	and     #$1F
	lsr     a
	sta     _mapX
	stx     _mapX+1
;
; mapY = (i >> 6);
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax2
	sta     _mapY
	stx     _mapY+1
;
; tileIndex = map[mapX + (mapY << 5)] << 1;
;
	lda     _mapY
	ldx     _mapY+1
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     _mapX
	sta     ptr1
	lda     tmp1
	adc     _mapX+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	ldx     #$00
	lda     (ptr1),y
	asl     a
	bcc     L0304
	inx
L0304:	sta     _tileIndex
	stx     _tileIndex+1
;
; if((i >> 5) & 0x1) {
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax1
	and     #$01
	beq     L0207
;
; tileIndex += 16;
;
	lda     #$10
	clc
	adc     _tileIndex
	sta     _tileIndex
	bcc     L0207
	inc     _tileIndex+1
;
; if(i & 0x1) {
;
L0207:	lda     _i
	and     #$01
	beq     L0305
;
; ++tileIndex;
;
	inc     _tileIndex
	bne     L0305
	inc     _tileIndex+1
;
; PPU.vram.data = (uint8_t)tileIndex;
;
L0305:	lda     _tileIndex
	sta     $2007
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01FC
	inx
L01FC:	sta     _i
	stx     _i+1
	jmp     L01F3
;
; PPU.vram.address = 0x23;
;
L01F4:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L021A:	lda     _i+1
	cmp     #$00
	bne     L0221
	lda     _i
	cmp     #$40
L0221:	bcs     L021B
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0223
	inx
L0223:	sta     _i
	stx     _i+1
	jmp     L021A
;
; }
;
L021B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L022E:	lda     _i+1
	cmp     #$00
	bne     L0236
	lda     _i
	cmp     #$20
L0236:	bcs     L022F
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L022E
	inc     _i+1
	jmp     L022E
;
; bankswitch(1);
;
L022F:	lda     #$01
	jsr     _bankswitch
;
; drawStatus();
;
	jsr     _drawStatus
;
; drawBackground();
;
	jsr     _drawBackground
;
; Scroll = 0;
;
	ldx     #$00
	txa
	sta     _Scroll
	sta     _Scroll+1
;
; spriteZero.x = 72;
;
	lda     #$48
	sta     _spriteZero+3
;
; spriteZero.y = 16;
;
	lda     #$10
	sta     _spriteZero
;
; spriteZero.tile_index = 0xFF;
;
	lda     #$FF
	sta     _spriteZero+1
;
; playerSprites[0].x = 0;
;
	txa
	sta     _playerSprites+3
;
; playerSprites[0].y = 0;
;
	sta     _playerSprites
;
; playerSprites[0].tile_index = 0x00;
;
	sta     _playerSprites+1
;
; playerSprites[1].x = 0;
;
	sta     _playerSprites+7
;
; playerSprites[1].y = 0;
;
	sta     _playerSprites+4
;
; playerSprites[1].tile_index = 0x01;
;
	lda     #$01
	sta     _playerSprites+5
;
; playerSprites[2].x = 0;
;
	txa
	sta     _playerSprites+11
;
; playerSprites[2].y = 0;
;
	sta     _playerSprites+8
;
; playerSprites[2].tile_index = 0x10;
;
	lda     #$10
	sta     _playerSprites+9
;
; playerSprites[3].x = 0;
;
	txa
	sta     _playerSprites+15
;
; playerSprites[3].y = 0;
;
	sta     _playerSprites+12
;
; playerSprites[3].tile_index = 0x11;
;
	lda     #$11
	sta     _playerSprites+13
;
; playerX = 32;
;
	lda     #$20
	sta     _playerX
	stx     _playerX+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; Scroll = 0;
;
	txa
	sta     _Scroll
	sta     _Scroll+1
;
; SplitEnable = 1;
;
	lda     #$01
	sta     _SplitEnable
;
; WaitFrame();
;
L027E:	jsr     _WaitFrame
;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L0308
;
; if (playerY > 0) {
;
	lda     _playerY
	ora     _playerY+1
	beq     L0308
;
; --playerY;
;
	lda     _playerY
	sec
	sbc     #$01
	sta     _playerY
	bcs     L0308
	dec     _playerY+1
;
; if(InputPort1 & BUTTON_DOWN) {
;
L0308:	lda     _InputPort1
	and     #$04
	beq     L0309
;
; if (playerY < 240) {
;
	lda     _playerY+1
	cmp     #$00
	bne     L028E
	lda     _playerY
	cmp     #$F0
L028E:	bcs     L0309
;
; ++playerY;
;
	inc     _playerY
	bne     L0309
	inc     _playerY+1
;
; if(InputPort1 & BUTTON_LEFT) {
;
L0309:	lda     _InputPort1
	and     #$02
	beq     L030A
;
; if (playerSpeedX > -8) {
;
	lda     _playerSpeedX
	sec
	sbc     #$F9
	bvs     L0296
	eor     #$80
L0296:	bpl     L02AE
;
; --playerSpeedX;
;
	dec     _playerSpeedX
	bpl     L02AE
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L02AE
L030A:	lda     _InputPort1
	and     #$01
	beq     L030B
;
; if (playerSpeedX < 8) {
;
	lda     _playerSpeedX
	sec
	sbc     #$08
	bvc     L029F
	eor     #$80
L029F:	bpl     L02AE
;
; ++playerSpeedX;
;
	inc     _playerSpeedX
	bpl     L02AE
;
; } else if(playerSpeedX > 0) {
;
	jmp     L02AE
L030B:	lda     _playerSpeedX
	sec
	sbc     #$01
	bvs     L02A6
	eor     #$80
L02A6:	bpl     L030C
;
; --playerSpeedX;
;
	dec     _playerSpeedX
	bpl     L02AE
;
; } else if(playerSpeedX < 0) {
;
	jmp     L02AE
L030C:	lda     _playerSpeedX
	asl     a
	bcc     L02AE
;
; ++playerSpeedX;
;
	inc     _playerSpeedX
;
; if(playerX < Scroll + 32 && Scroll > 0) {
;
L02AE:	lda     _playerX
	ldx     _playerX+1
	jsr     pushax
	lda     _Scroll
	ldx     _Scroll+1
	clc
	adc     #$20
	bcc     L02B1
	inx
L02B1:	jsr     tosicmp
	bcs     L02AF
	lda     _Scroll
	ora     _Scroll+1
	beq     L02AF
;
; Scroll -= 2;
;
	lda     _Scroll
	sec
	sbc     #$02
	sta     _Scroll
	bcs     L02AF
	dec     _Scroll+1
;
; if(playerX > Scroll + 256 - 32 && Scroll < 256) {
;
L02AF:	lda     _playerX
	ldx     _playerX+1
	jsr     pushax
	lda     _Scroll
	ldx     _Scroll+1
	inx
	sec
	sbc     #$20
	bcs     L02BA
	dex
L02BA:	jsr     tosicmp
	bcc     L02BF
	beq     L02BF
	ldx     _Scroll+1
	cpx     #$01
	bcs     L02BF
;
; Scroll += 2;
;
	lda     #$02
	clc
	adc     _Scroll
	sta     _Scroll
	bcc     L02BF
	inc     _Scroll+1
;
; playerX += playerSpeedX;
;
L02BF:	ldx     #$00
	lda     _playerSpeedX
	cmp     #$80
	bcc     L0307
	dex
	clc
L0307:	adc     _playerX
	sta     _playerX
	txa
	adc     _playerX+1
	sta     _playerX+1
;
; relativePlayerX = playerX - Scroll;
;
	lda     _playerX
	sec
	sbc     _Scroll
	sta     _relativePlayerX
	lda     _playerX+1
	sbc     _Scroll+1
	sta     _relativePlayerX+1
;
; playerYOffset = (FrameCount & 0x07);
;
	lda     _FrameCount
	and     #$07
	cmp     #$80
	sta     _playerYOffset
;
; playerSprites[0].x = relativePlayerX; playerSprites[0].y = playerY + playerYOffset; playerSprites[0].tile_index = ((FrameCount >> 3) & 0x01) ? 0x00 : 0x02;
;
	lda     _relativePlayerX
	sta     _playerSprites+3
	ldx     #$00
	lda     _playerYOffset
	bpl     L02D0
	dex
L02D0:	clc
	adc     _playerY
	sta     _playerSprites
	txa
	adc     _playerY+1
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	beq     L030F
	lda     #$00
	jmp     L0310
L030F:	lda     #$02
L0310:	sta     _playerSprites+1
;
; playerSprites[1].x = relativePlayerX + 8; playerSprites[1].y = playerY + playerYOffset; playerSprites[1].tile_index = playerSprites[0].tile_index + 0x01;
;
	lda     _relativePlayerX
	clc
	adc     #$08
	sta     _playerSprites+7
	ldx     #$00
	lda     _playerYOffset
	bpl     L02E1
	dex
L02E1:	clc
	adc     _playerY
	sta     _playerSprites+4
	txa
	adc     _playerY+1
	lda     _playerSprites+1
	clc
	adc     #$01
	sta     _playerSprites+5
;
; playerSprites[2].x = relativePlayerX; playerSprites[2].y = playerY + 8 + playerYOffset; playerSprites[2].tile_index = playerSprites[0].tile_index + 0x10;
;
	lda     _relativePlayerX
	sta     _playerSprites+11
	lda     _playerY
	ldx     _playerY+1
	clc
	adc     #$08
	bcc     L02ED
	inx
L02ED:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _playerYOffset
	bpl     L02EE
	dex
L02EE:	clc
	adc     ptr1
	sta     _playerSprites+8
	txa
	adc     ptr1+1
	lda     _playerSprites+1
	clc
	adc     #$10
	sta     _playerSprites+9
;
; playerSprites[3].x = relativePlayerX + 8; playerSprites[3].y = playerY + 8 + playerYOffset; playerSprites[3].tile_index = playerSprites[0].tile_index + 0x11;
;
	lda     _relativePlayerX
	clc
	adc     #$08
	sta     _playerSprites+15
	lda     _playerY
	ldx     _playerY+1
	clc
	adc     #$08
	bcc     L02FB
	inx
L02FB:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _playerYOffset
	bpl     L02FC
	dex
L02FC:	clc
	adc     ptr1
	sta     _playerSprites+12
	txa
	adc     ptr1+1
	lda     _playerSprites+1
	clc
	adc     #$11
	sta     _playerSprites+13
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L027E

.endproc

