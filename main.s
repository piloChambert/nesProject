;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_FrameCount
	.importzp	_InputPort1
	.importzp	_VRAMUpdateReady
	.importzp	_Scroll
	.importzp	_BGDestAddr
	.import		_WaitFrame
	.import		_bankswitch
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_tile
	.export		_tileIdx
	.export		_currentEntityId
	.export		_currentMetaSpriteId
	.export		_mapCurrentLine
	.export		_sprites
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_mapLineCount
	.export		_copyBgLine
	.export		_fillBackground
	.export		_playerSpriteFrames
	.export		_drawMetaSprite
	.export		_entities
	.export		_freeEntityList
	.export		_entityList
	.export		_initEntityList
	.export		_pushEntity
	.export		_removeEntity
	.export		_popEntity
	.export		_playerUpdate
	.export		_main

.segment	"DATA"

_freeEntityList:
	.byte	$FF
_entityList:
	.byte	$FF

.segment	"RODATA"

_PALETTE:
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$22
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_mapLineCount:
	.word	$002B
_playerSpriteFrames:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$7F

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_tile:
	.res	1,$00
_tileIdx:
	.res	1,$00
_currentEntityId:
	.res	1,$00
_currentMetaSpriteId:
	.res	1,$00
_mapCurrentLine:
	.res	2,$00
.segment	"BSS"
.segment	"OAM"
_sprites:
	.res	256,$00
.segment	"BSS"
_entities:
	.res	144,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ copyBgLine (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyBgLine: near

.segment	"CODE"

;
; void __fastcall__ copyBgLine(uint16_t line) {
;
	jsr     pushax
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     #$00
L04D4:	sta     _tile
	cmp     #$40
	bcs     L02E4
;
; tileIdx = map[line * 16 + ((tile & 0x1F) >> 1)] << 1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _tile
	and     #$1F
	lsr     a
	clc
	adc     ptr1
	sta     ptr1
	tya
	adc     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	asl     a
	sta     _tileIdx
;
; if(tile & 0x1) {
;
	lda     _tile
	and     #$01
	beq     L04D2
;
; ++tileIdx;
;
	inc     _tileIdx
;
; if(tile >= 32) {
;
L04D2:	lda     _tile
	cmp     #$20
	bcc     L04D3
;
; tileIdx += 0x10;
;
	lda     #$10
	clc
	adc     _tileIdx
	sta     _tileIdx
;
; PPU.vram.data = tileIdx;
;
L04D3:	lda     _tileIdx
	sta     $2007
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     _tile
	clc
	adc     #$01
	jmp     L04D4
;
; }
;
L02E4:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fillBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fillBackground: near

.segment	"CODE"

;
; mapCurrentLine = mapLineCount - 30;
;
	lda     _mapLineCount
	ldx     _mapLineCount+1
	sec
	sbc     #$1E
	bcs     L02FD
	dex
L02FD:	sta     _mapCurrentLine
	stx     _mapCurrentLine+1
;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 14; i < 15; i++) {
;
	tax
	lda     #$0E
L04D7:	sta     _i
	stx     _i+1
	lda     _i+1
	cmp     #$00
	bne     L030B
	lda     _i
	cmp     #$0F
L030B:	bcs     L0305
;
; copyBgLine(mapCurrentLine + i);
;
	lda     _mapCurrentLine
	clc
	adc     _i
	pha
	lda     _mapCurrentLine+1
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; for(i = 14; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L04D7
	inx
	jmp     L04D7
;
; PPU.vram.address = 0x23;
;
L0305:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0316:	lda     _i+1
	cmp     #$00
	bne     L031D
	lda     _i
	cmp     #$40
L031D:	bcs     L0317
;
; PPU.vram.data = 0x55;
;
	lda     #$55
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L031F
	inx
L031F:	sta     _i
	stx     _i+1
	jmp     L0316
;
; PPU.vram.address = 0x28;
;
L0317:	lda     #$28
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L0329:	lda     _i+1
	cmp     #$00
	bne     L0330
	lda     _i
	cmp     #$0F
L0330:	bcs     L032A
;
; copyBgLine(mapCurrentLine + 15 + i);
;
	lda     _mapCurrentLine
	ldx     _mapCurrentLine+1
	clc
	adc     #$0F
	bcc     L04D5
	inx
	clc
L04D5:	adc     _i
	pha
	txa
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0332
	inx
L0332:	sta     _i
	stx     _i+1
	jmp     L0329
;
; }
;
L032A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ drawMetaSprite (unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMetaSprite: near

.segment	"CODE"

;
; void __fastcall__ drawMetaSprite(uint8_t x, uint8_t y, const uint8_t *data) {
;
	jsr     pushax
;
; const uint8_t *ptr = data;
;
	jsr     pushw0sp
;
; while(*ptr != 127) {
;
	jmp     L035E
;
; sprites[currentMetaSpriteId].x = x + *(ptr++);
;
L04D8:	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0364
	inx
L0364:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$03
	jsr     staspidx
;
; sprites[currentMetaSpriteId].y = y + *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0369
	inx
L0369:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; sprites[currentMetaSpriteId].tile_index = *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L036E
	inx
L036E:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	iny
	jsr     staspidx
;
; sprites[currentMetaSpriteId].attributes = *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0373
	inx
L0373:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	ldy     #$02
	jsr     staspidx
;
; currentMetaSpriteId++;
;
	lda     _currentMetaSpriteId
	clc
	adc     #$01
	sta     _currentMetaSpriteId
;
; while(*ptr != 127) {
;
L035E:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	cmp     #$7F
	jne     L04D8
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ initEntityList (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initEntityList: near

.segment	"CODE"

;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0379:	lda     _i+1
	cmp     #$00
	bne     L0380
	lda     _i
	cmp     #$10
L0380:	jcs     L037A
;
; entities[i].x = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; entities[i].y = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; entities[i].vx = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].vy = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].update = NULL;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$07
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; entities[i].health = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; entities[i].prev = i == 0? 0xFF : i - 1;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i
	ora     _i+1
	bne     L0399
	lda     #$FF
	jmp     L04D9
L0399:	lda     _i
	sec
	sbc     #$01
L04D9:	iny
	sta     (ptr1),y
;
; entities[i].next = i == ENTITY_COUNT - 1 ? 0x0FF : i + 1;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i+1
	bne     L03A2
	lda     _i
	cmp     #$0F
	bne     L03A2
	lda     #$FF
	jmp     L04DA
L03A2:	lda     _i
	clc
	adc     #$01
L04DA:	iny
	sta     (ptr1),y
;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0382
	inx
L0382:	sta     _i
	stx     _i+1
	jmp     L0379
;
; freeEntityList = 0;
;
L037A:	lda     #$00
	sta     _freeEntityList
;
; entityList = 0xFF;
;
	lda     #$FF
	sta     _entityList
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pushEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pushEntity: near

.segment	"CODE"

;
; void pushEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list != 0xFF) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$FF
	beq     L03AC
;
; entities[id].next = *list;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$06
	jsr     staspidx
;
; entities[*list].prev = id;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$05
	sta     (ptr1),y
;
; *list = id;
;
L03AC:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ removeEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_removeEntity: near

.segment	"CODE"

;
; void removeEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list == id) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	ldy     #$02
	cmp     (sp),y
	bne     L04E4
;
; if(entities[id].next == 0xFF) {
;
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	cmp     #$FF
	bne     L03BC
;
; *list = 0xFF; // empty list
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$FF
	sta     (ptr1),y
;
; } else {
;
	jmp     L03C8
;
; *list = entities[id].next;
;
L03BC:	jsr     pushw0sp
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; entities[*list].prev = 0xFF;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$05
	sta     (ptr1),y
;
; } else {
;
	jmp     L03C8
;
; entities[entities[id].prev].next = entities[id].next;
;
L04E4:	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$05
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	jsr     staspidx
;
; entities[id].next = 0xFF;
;
L03C8:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$06
	sta     (ptr1),y
;
; entities[id].prev = 0xFF;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$05
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ popEntity (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_popEntity: near

.segment	"CODE"

;
; uint8_t popEntity(uint8_t *list) {
;
	jsr     pushax
;
; uint8_t newId = *list;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	jsr     pusha
;
; removeEntity(newId, list);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _removeEntity
;
; return newId;
;
	ldx     #$00
	lda     (sp,x)
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ playerUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerUpdate: near

.segment	"CODE"

;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L04E6
;
; if (entities[currentEntityId].vy > -6) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L03E0
	eor     #$80
L03E0:	jpl     L04EA
;
; entities[currentEntityId].vy -= 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
;
; else if(InputPort1 & BUTTON_DOWN) {
;
	jmp     L04EA
L04E6:	lda     _InputPort1
	ldx     #$00
	and     #$04
	beq     L04E7
;
; if (entities[currentEntityId].vy < 6) {
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L03EA
	eor     #$80
L03EA:	jpl     L04EA
;
; entities[currentEntityId].vy += 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	jsr     ldaidx
	clc
	adc     #$01
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy > 2) {
;
	jmp     L04EA
L04E7:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L03F2
	eor     #$80
L03F2:	asl     a
	ldx     #$00
	bcc     L04E8
;
; entities[currentEntityId].vy -= 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy < -2) {
;
	jmp     L04EA
L04E8:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L03FA
	eor     #$80
L03FA:	asl     a
	ldx     #$00
	bcc     L04E9
;
; entities[currentEntityId].vy += 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L04EA
;
; entities[currentEntityId].vy = 0;
;
L04E9:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1),y
;
; if(InputPort1 & BUTTON_LEFT) {
;
L04EA:	lda     _InputPort1
	and     #$02
	beq     L04EB
;
; if (entities[currentEntityId].vx > -6) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L0407
	eor     #$80
L0407:	asl     a
	ldx     #$00
	jcc     L04EF
;
; --entities[currentEntityId].vx;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L04E5
L04EB:	lda     _InputPort1
	ldx     #$00
	and     #$01
	beq     L04EC
;
; if (entities[currentEntityId].vx < 6) {
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L0410
	eor     #$80
L0410:	asl     a
	ldx     #$00
	jcc     L04EF
;
; ++entities[currentEntityId].vx;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$01
	clc
	adc     (ptr1),y
;
; } else if(entities[currentEntityId].vx > 2) {
;
	jmp     L04E5
L04EC:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0417
	eor     #$80
L0417:	asl     a
	ldx     #$00
	bcc     L04ED
;
; entities[currentEntityId].vx -= 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$02
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vx < -2) {
;
	jmp     L0423
L04ED:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L041F
	eor     #$80
L041F:	asl     a
	ldx     #$00
	bcc     L04EE
;
; entities[currentEntityId].vx += 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$02
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L0423
;
; entities[currentEntityId].vx = 0;
;
L04EE:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
L04E5:	sta     (ptr1),y
;
; entities[currentEntityId].x += entities[currentEntityId].vx;
;
L0423:	ldx     #$00
L04EF:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; entities[currentEntityId].y += entities[currentEntityId].vy;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$01
	jsr     staspidx
;
; drawMetaSprite(entities[currentEntityId].x, entities[currentEntityId].y, playerSpriteFrames[(FrameCount >> 2) & 0x01]);
;
	jsr     decsp2
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	sta     ptr1
	txa
	clc
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #<(_entities)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	and     #$01
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jsr     _drawMetaSprite
;
; if(entities[currentEntityId].y > 240) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$F1
	bcc     L0437
;
; removeEntity(currentEntityId, &entityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _removeEntity
;
; pushEntity(currentEntityId, &freeEntityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jmp     _pushEntity
;
; }
;
L0437:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	jsr     decsp1
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L0447:	lda     _i+1
	cmp     #$00
	bne     L044F
	lda     _i
	cmp     #$20
L044F:	bcs     L0448
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L0447
	inc     _i+1
	jmp     L0447
;
; initEntityList();
;
L0448:	jsr     _initEntityList
;
; bankswitch(0);
;
	lda     #$00
	jsr     _bankswitch
;
; fillBackground();
;
	jsr     _fillBackground
;
; playerId = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	ldy     #$00
	sta     (sp),y
;
; pushEntity(playerId, &entityList);
;
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[playerId].x = 64;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	sta     (ptr1),y
;
; entities[playerId].y = 128;
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$80
	iny
	sta     (ptr1),y
;
; entities[playerId].vx = 0;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].vy = 0;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].health = 255;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	iny
	sta     (ptr1),y
;
; entities[playerId].update = playerUpdate;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #<(_playerUpdate)
	ldy     #$07
	sta     (ptr1),y
	iny
	lda     #>(_playerUpdate)
	sta     (ptr1),y
;
; playerId = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	ldy     #$00
	sta     (sp),y
;
; pushEntity(playerId, &entityList);
;
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[playerId].x = playerId;
;
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
;
; entities[playerId].y = 64;
;
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	iny
	sta     (ptr1),y
;
; entities[playerId].vx = 0;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].vy = 0;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].health = 255;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	iny
	sta     (ptr1),y
;
; entities[playerId].update = playerUpdate;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #<(_playerUpdate)
	ldy     #$07
	sta     (ptr1),y
	iny
	lda     #>(_playerUpdate)
	sta     (ptr1),y
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; Scroll = 0x108;
;
	ldx     #$01
	sty     _Scroll
	stx     _Scroll+1
;
; WaitFrame();
;
L0497:	jsr     _WaitFrame
;
; currentMetaSpriteId = 0; // might be done in nmi?
;
	lda     #$00
	sta     _currentMetaSpriteId
;
; if(FrameCount > 0x04) {
;
	lda     _FrameCount
	cmp     #$05
	ldx     #$00
	jcc     L04F6
;
; if(Scroll > 0) {
;
	lda     _Scroll
	ora     _Scroll+1
	beq     L04A0
;
; --Scroll;
;
	lda     _Scroll
	sec
	sbc     #$01
	sta     _Scroll
	bcs     L04A4
	dec     _Scroll+1
;
; if(Scroll == 255) {
;
L04A4:	lda     _Scroll+1
	bne     L04AA
	lda     _Scroll
	cmp     #$FF
	bne     L04AA
;
; } else {
;
	jmp     L04FC
;
; Scroll = 256 + 239;
;
L04A0:	inx
L04FC:	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; if((Scroll & 0x0F) == 0 && mapCurrentLine > 0) {
;
L04AA:	lda     _Scroll
	and     #$0F
	bne     L04FA
	lda     _mapCurrentLine
	ora     _mapCurrentLine+1
	beq     L04FB
;
; --mapCurrentLine;
;
	lda     _mapCurrentLine
	sec
	sbc     #$01
	sta     _mapCurrentLine
	bcs     L04B5
	dec     _mapCurrentLine+1
;
; BGDestAddr = ((Scroll > 240 ? 0x28 : 0x20) << 8) + (((Scroll & 0xFF) >> 4) << 5);
;
L04B5:	lda     _Scroll
	cmp     #$F1
	lda     _Scroll+1
	sbc     #$00
	bcc     L04F3
	lda     #$28
	jmp     L04BC
L04F3:	lda     #$20
L04BC:	sta     ptr1+1
	lda     _Scroll
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$00
	sta     _BGDestAddr
	lda     tmp1
	adc     ptr1+1
	sta     _BGDestAddr+1
;
; FrameCount = 0;
;
L04FA:	lda     #$00
L04FB:	sta     _FrameCount
;
; currentEntityId = entityList;
;
	tax
L04F6:	lda     _entityList
	sta     _currentEntityId
;
; while(currentEntityId != 0xFF) {
;
	jmp     L04F8
;
; uint8_t next = entities[currentEntityId].next;
;
L04F7:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	jsr     pusha
;
; entities[currentEntityId].update();
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     callax
;
; currentEntityId = next;
;
	ldy     #$00
	lda     (sp),y
	sta     _currentEntityId
;
; }
;
	jsr     incsp1
;
; while(currentEntityId != 0xFF) {
;
	ldx     #$00
L04F8:	lda     _currentEntityId
	cmp     #$FF
	bne     L04F7
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L0497

.endproc

