;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_InputPort1
	.importzp	_VRAMUpdateReady
	.importzp	_SplitEnable
	.importzp	_Scroll
	.import		_WaitFrame
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_playerX
	.export		_playerY
	.export		_playerSpeedX
	.export		_relativePlayerX
	.export		_score
	.export		_spriteZero
	.export		_playerSprites
	.export		_ScoreText
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_drawStatus
	.export		_drawBackground
	.export		_main

.segment	"DATA"

_playerX:
	.word	$0000
_playerY:
	.word	$0000
_playerSpeedX:
	.byte	$00
_score:
	.word	$152D

.segment	"RODATA"

_ScoreText:
	.byte	$53,$63,$6F,$72,$65,$2E,$00
_PALETTE:
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$22
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$22
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$22
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$22
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_relativePlayerX:
	.res	2,$00
.segment	"BSS"
.segment	"OAM"
_spriteZero:
	.res	4,$00
_playerSprites:
	.res	16,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ drawStatus (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawStatus: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x40 + 0x04;    
;
	lda     #$44
	sta     $2006
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01DC:	lda     _i+1
	cmp     #$00
	bne     L01E4
	lda     _i
	cmp     #$07
L01E4:	bcs     L01DD
;
; PPU.vram.data = ScoreText[i];
;
	lda     #<(_ScoreText)
	sta     ptr1
	lda     #>(_ScoreText)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01E6
	inx
L01E6:	sta     _i
	stx     _i+1
	jmp     L01DC
;
; }
;
L01DD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBackground: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0xA0;
;
	lda     #$A0
	sta     $2006
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01F2:	lda     _i+1
	cmp     #$03
	bne     L01F9
	lda     _i
	cmp     #$40
L01F9:	jcs     L01F3
;
; mapX = (i & 0x1F) >> 1;
;
	lda     _i
	ldx     #$00
	and     #$1F
	lsr     a
	sta     _mapX
	stx     _mapX+1
;
; mapY = (i >> 6);
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax2
	sta     _mapY
	stx     _mapY+1
;
; tileIndex = (map[mapX + (mapY << 6)] & 39) << 1;
;
	lda     _mapY
	ldx     _mapY+1
	jsr     shlax4
	jsr     shlax2
	clc
	adc     _mapX
	sta     ptr1
	txa
	adc     _mapX+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldx     #$00
	and     #$27
	asl     a
	bcc     L02E1
	inx
L02E1:	sta     _tileIndex
	stx     _tileIndex+1
;
; if((i >> 5) & 0x1) {
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax1
	and     #$01
	beq     L0207
;
; tileIndex += 16;
;
	lda     #$10
	clc
	adc     _tileIndex
	sta     _tileIndex
	bcc     L0207
	inc     _tileIndex+1
;
; if(i & 0x1) {
;
L0207:	lda     _i
	and     #$01
	beq     L02E2
;
; ++tileIndex;
;
	inc     _tileIndex
	bne     L02E2
	inc     _tileIndex+1
;
; PPU.vram.data = (uint8_t)tileIndex;
;
L02E2:	lda     _tileIndex
	sta     $2007
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01FB
	inx
L01FB:	sta     _i
	stx     _i+1
	jmp     L01F2
;
; PPU.vram.address = 0x23;
;
L01F3:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L021A:	lda     _i+1
	cmp     #$00
	bne     L0221
	lda     _i
	cmp     #$40
L0221:	bcs     L021B
;
; PPU.vram.data = i & 0x0F;
;
	lda     _i
	and     #$0F
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0223
	inx
L0223:	sta     _i
	stx     _i+1
	jmp     L021A
;
; }
;
L021B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L022E:	lda     _i+1
	cmp     #$00
	bne     L0236
	lda     _i
	cmp     #$20
L0236:	bcs     L022F
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L022E
	inc     _i+1
	jmp     L022E
;
; drawStatus();
;
L022F:	jsr     _drawStatus
;
; drawBackground();
;
	jsr     _drawBackground
;
; Scroll = 0;
;
	ldx     #$00
	txa
	sta     _Scroll
	sta     _Scroll+1
;
; spriteZero.x = 72;
;
	lda     #$48
	sta     _spriteZero+3
;
; spriteZero.y = 16;
;
	lda     #$10
	sta     _spriteZero
;
; spriteZero.tile_index = 0xFF;
;
	lda     #$FF
	sta     _spriteZero+1
;
; playerSprites[0].x = 0;
;
	txa
	sta     _playerSprites+3
;
; playerSprites[0].y = 0;
;
	sta     _playerSprites
;
; playerSprites[0].tile_index = 0x00;
;
	sta     _playerSprites+1
;
; playerSprites[1].x = 0;
;
	sta     _playerSprites+7
;
; playerSprites[1].y = 0;
;
	sta     _playerSprites+4
;
; playerSprites[1].tile_index = 0x01;
;
	lda     #$01
	sta     _playerSprites+5
;
; playerSprites[2].x = 0;
;
	txa
	sta     _playerSprites+11
;
; playerSprites[2].y = 0;
;
	sta     _playerSprites+8
;
; playerSprites[2].tile_index = 0x10;
;
	lda     #$10
	sta     _playerSprites+9
;
; playerSprites[3].x = 0;
;
	txa
	sta     _playerSprites+15
;
; playerSprites[3].y = 0;
;
	sta     _playerSprites+12
;
; playerSprites[3].tile_index = 0x11;
;
	lda     #$11
	sta     _playerSprites+13
;
; playerX = 32;
;
	lda     #$20
	sta     _playerX
	stx     _playerX+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; Scroll = 0;
;
	txa
	sta     _Scroll
	sta     _Scroll+1
;
; SplitEnable = 1;
;
	lda     #$01
	sta     _SplitEnable
;
; WaitFrame();
;
L027C:	jsr     _WaitFrame
;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L02E8
;
; if (playerY > 0) {
;
	lda     _playerY
	ora     _playerY+1
	beq     L02E8
;
; --playerY;
;
	lda     _playerY
	sec
	sbc     #$01
	sta     _playerY
	bcs     L02E8
	dec     _playerY+1
;
; if(InputPort1 & BUTTON_DOWN) {
;
L02E8:	lda     _InputPort1
	and     #$04
	beq     L02E9
;
; if (playerY < 240) {
;
	lda     _playerY+1
	cmp     #$00
	bne     L028C
	lda     _playerY
	cmp     #$F0
L028C:	bcs     L02E9
;
; ++playerY;
;
	inc     _playerY
	bne     L02E9
	inc     _playerY+1
;
; if(InputPort1 & BUTTON_LEFT) {
;
L02E9:	lda     _InputPort1
	and     #$02
	beq     L02EA
;
; if (playerSpeedX > -8) {
;
	lda     _playerSpeedX
	sec
	sbc     #$F9
	bvs     L0294
	eor     #$80
L0294:	bpl     L02AC
;
; --playerSpeedX;
;
	dec     _playerSpeedX
	bpl     L02AC
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L02AC
L02EA:	lda     _InputPort1
	and     #$01
	beq     L02EB
;
; if (playerSpeedX < 8) {
;
	lda     _playerSpeedX
	sec
	sbc     #$08
	bvc     L029D
	eor     #$80
L029D:	bpl     L02AC
;
; ++playerSpeedX;
;
	inc     _playerSpeedX
	bpl     L02AC
;
; } else if(playerSpeedX > 0) {
;
	jmp     L02AC
L02EB:	lda     _playerSpeedX
	sec
	sbc     #$01
	bvs     L02A4
	eor     #$80
L02A4:	bpl     L02EC
;
; --playerSpeedX;
;
	dec     _playerSpeedX
	bpl     L02AC
;
; } else if(playerSpeedX < 0) {
;
	jmp     L02AC
L02EC:	lda     _playerSpeedX
	asl     a
	bcc     L02AC
;
; ++playerSpeedX;
;
	inc     _playerSpeedX
;
; if((playerX < Scroll + 32 && Scroll > 0) || (playerX > Scroll + 256 - 32 && Scroll < 256)) {
;
L02AC:	lda     _playerX
	ldx     _playerX+1
	jsr     pushax
	lda     _Scroll
	ldx     _Scroll+1
	clc
	adc     #$20
	bcc     L02B0
	inx
L02B0:	jsr     tosicmp
	bcs     L02E3
	lda     _Scroll
	ora     _Scroll+1
	bne     L02F6
L02E3:	lda     _playerX
	ldx     _playerX+1
	jsr     pushax
	lda     _Scroll
	ldx     _Scroll+1
	inx
	sec
	sbc     #$20
	bcs     L02B5
	dex
L02B5:	jsr     tosicmp
	bcc     L02F5
	beq     L02F5
	ldx     _Scroll+1
	cpx     #$01
	bcs     L02F5
L02F6:	ldx     #$00
;
; Scroll += playerSpeedX;
;
	lda     _playerSpeedX
	cmp     #$80
	bcc     L02E6
	dex
	clc
L02E6:	adc     _Scroll
	sta     _Scroll
	txa
	adc     _Scroll+1
	sta     _Scroll+1
;
; playerX += playerSpeedX;
;
L02F5:	ldx     #$00
	lda     _playerSpeedX
	cmp     #$80
	bcc     L02E7
	dex
	clc
L02E7:	adc     _playerX
	sta     _playerX
	txa
	adc     _playerX+1
	sta     _playerX+1
;
; relativePlayerX = playerX - Scroll;
;
	lda     _playerX
	sec
	sbc     _Scroll
	sta     _relativePlayerX
	lda     _playerX+1
	sbc     _Scroll+1
	sta     _relativePlayerX+1
;
; playerSprites[0].x = relativePlayerX; playerSprites[0].y = playerY;
;
	lda     _relativePlayerX
	sta     _playerSprites+3
	lda     _playerY
	sta     _playerSprites
;
; playerSprites[1].x = relativePlayerX + 8; playerSprites[1].y = playerY;
;
	lda     _relativePlayerX
	clc
	adc     #$08
	sta     _playerSprites+7
	lda     _playerY
	sta     _playerSprites+4
;
; playerSprites[2].x = relativePlayerX; playerSprites[2].y = playerY + 8;
;
	lda     _relativePlayerX
	sta     _playerSprites+11
	lda     _playerY
	clc
	adc     #$08
	sta     _playerSprites+8
;
; playerSprites[3].x = relativePlayerX + 8; playerSprites[3].y = playerY + 8;
;
	lda     _relativePlayerX
	clc
	adc     #$08
	sta     _playerSprites+15
	lda     _playerY
	clc
	adc     #$08
	sta     _playerSprites+12
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L027C

.endproc

