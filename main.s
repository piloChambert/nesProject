;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_FrameCount
	.importzp	_InputPort1
	.importzp	_InputPort1Prev
	.importzp	_VRAMUpdateReady
	.importzp	_Scroll
	.importzp	_BGDestAddr
	.importzp	_BGBuffer
	.import		_WaitFrame
	.import		_bankswitch
	.import		_flushBGBuffer
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_tile
	.export		_tileIdx
	.export		_currentEntityId
	.export		_currentMetaSpriteId
	.export		_mapCurrentLine
	.export		_sprites
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_mapLineCount
	.export		_copyBgLine
	.export		_fillBackground
	.export		_playerSpriteFrames
	.export		_drawMetaSprite
	.export		_drawSprite
	.export		_entities
	.export		_freeEntityList
	.export		_entityList
	.export		_missileList
	.export		_initEntityList
	.export		_pushEntity
	.export		_removeEntity
	.export		_popEntity
	.export		_bulletUpdate
	.export		_spawnBullet
	.export		_playerUpdate
	.export		_main

.segment	"DATA"

_freeEntityList:
	.byte	$FF
_entityList:
	.byte	$FF
_missileList:
	.byte	$FF

.segment	"RODATA"

_PALETTE:
	.byte	$2A
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$2A
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$2A
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$2A
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$2A
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$2A
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$2A
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$2A
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_mapLineCount:
	.word	$003B
_playerSpriteFrames:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$7F

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_tile:
	.res	1,$00
_tileIdx:
	.res	1,$00
_currentEntityId:
	.res	1,$00
_currentMetaSpriteId:
	.res	1,$00
_mapCurrentLine:
	.res	2,$00
.segment	"BSS"
.segment	"OAM"
_sprites:
	.res	256,$00
.segment	"BSS"
_entities:
	.res	144,$00

; ---------------------------------------------------------------
; void __near__ __fastcall__ copyBgLine (__near__ const unsigned char *, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyBgLine: near

.segment	"BSS"

L03E4:
	.res	2,$00

.segment	"CODE"

;
; void __fastcall__ copyBgLine(const uint8_t *buffer, uint16_t line) {
;
	jsr     pushax
;
; ptr = &BGBuffer;
;
	lda     #<(_BGBuffer)
	sta     L03E4
	lda     #>(_BGBuffer)
	sta     L03E4+1
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     #$00
L066D:	sta     _tile
	cmp     #$40
	bcs     L03E8
;
; tileIdx = buffer[line * 16 + ((tile & 0x1F) >> 1)] << 1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _tile
	and     #$1F
	lsr     a
	clc
	adc     ptr1
	pha
	tya
	adc     ptr1+1
	tax
	pla
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	sta     _tileIdx
;
; if(tile & 0x1) {
;
	lda     _tile
	and     #$01
	beq     L066C
;
; ++tileIdx;
;
	inc     _tileIdx
;
; if(tile >= 32) {
;
L066C:	lda     _tile
	cmp     #$20
	bcc     L03F7
;
; tileIdx += 0x10;
;
	lda     #$10
	clc
	adc     _tileIdx
	sta     _tileIdx
;
; (*ptr++) = tileIdx;
;
L03F7:	lda     L03E4
	ldx     L03E4+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L03FD
	inx
L03FD:	sta     L03E4
	stx     L03E4+1
	lda     _tileIdx
	sta     (regsave),y
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     _tile
	clc
	adc     #$01
	jmp     L066D
;
; }
;
L03E8:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ fillBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fillBackground: near

.segment	"CODE"

;
; mapCurrentLine = mapLineCount - 30;
;
	lda     _mapLineCount
	ldx     _mapLineCount+1
	sec
	sbc     #$1E
	bcs     L0402
	dex
L0402:	sta     _mapCurrentLine
	stx     _mapCurrentLine+1
;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L0409:	lda     _i+1
	cmp     #$00
	bne     L0410
	lda     _i
	cmp     #$0F
L0410:	bcs     L040A
;
; copyBgLine(map, mapCurrentLine + i);
;
	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	clc
	adc     _i
	pha
	lda     _mapCurrentLine+1
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; flushBGBuffer();
;
	ldy     #$00
	jsr     _flushBGBuffer
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0412
	inx
L0412:	sta     _i
	stx     _i+1
	jmp     L0409
;
; PPU.vram.address = 0x28;
;
L040A:	lda     #$28
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L041D:	lda     _i+1
	cmp     #$00
	bne     L0424
	lda     _i
	cmp     #$0F
L0424:	bcs     L041E
;
; copyBgLine(map, mapCurrentLine + 15 + i);
;
	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	ldx     _mapCurrentLine+1
	clc
	adc     #$0F
	bcc     L066E
	inx
	clc
L066E:	adc     _i
	pha
	txa
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; flushBGBuffer();
;
	ldy     #$00
	jsr     _flushBGBuffer
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0426
	inx
L0426:	sta     _i
	stx     _i+1
	jmp     L041D
;
; PPU.vram.address = 0x23;
;
L041E:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0432:	lda     _i+1
	cmp     #$00
	bne     L0439
	lda     _i
	cmp     #$40
L0439:	bcs     L0433
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L043B
	inx
L043B:	sta     _i
	stx     _i+1
	jmp     L0432
;
; PPU.vram.address = 0x2B;
;
L0433:	lda     #$2B
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0445:	lda     _i+1
	cmp     #$00
	bne     L044C
	lda     _i
	cmp     #$40
L044C:	bcs     L0446
;
; PPU.vram.data = 0xFF;
;
	lda     #$FF
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L044E
	inx
L044E:	sta     _i
	stx     _i+1
	jmp     L0445
;
; }
;
L0446:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ drawMetaSprite (unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMetaSprite: near

.segment	"CODE"

;
; void __fastcall__ drawMetaSprite(uint8_t x, uint8_t y, const uint8_t *data) {
;
	jsr     pushax
;
; const uint8_t *ptr = data;
;
	jsr     pushw0sp
;
; while(*ptr != 127) {
;
	jmp     L047A
;
; if(x + *ptr < 255) {
;
L0478:	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1,x)
	jsr     tosadda0
	cpx     #$00
	bne     L047E
	cmp     #$FF
L047E:	jcs     L047C
;
; sprites[currentMetaSpriteId].x = x + *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0483
	inx
L0483:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$03
	jsr     staspidx
;
; sprites[currentMetaSpriteId].y = y + *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0488
	inx
L0488:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; sprites[currentMetaSpriteId].tile_index = *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L048D
	inx
L048D:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	iny
	jsr     staspidx
;
; sprites[currentMetaSpriteId].attributes = *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0492
	inx
L0492:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	ldy     #$02
	jsr     staspidx
;
; currentMetaSpriteId++;
;
	lda     _currentMetaSpriteId
	clc
	adc     #$01
	sta     _currentMetaSpriteId
;
; } else {
;
	jmp     L047A
;
; ptr += 4; 
;
L047C:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
;
; while(*ptr != 127) {
;
L047A:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$7F
	jne     L0478
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ drawSprite (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprite: near

.segment	"CODE"

;
; void __fastcall__ drawSprite(uint8_t x, uint8_t y, uint8_t tile, uint8_t attr) {
;
	jsr     pusha
;
; sprites[currentMetaSpriteId].x = x;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].y = y;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].tile_index = tile;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	iny
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].attributes = attr;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$02
	sta     (ptr1),y
;
; currentMetaSpriteId++;
;
	lda     _currentMetaSpriteId
	clc
	adc     #$01
	sta     _currentMetaSpriteId
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ initEntityList (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initEntityList: near

.segment	"CODE"

;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L04AA:	lda     _i+1
	cmp     #$00
	bne     L04B1
	lda     _i
	cmp     #$10
L04B1:	jcs     L04AB
;
; entities[i].x = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; entities[i].y = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].vx = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].vy = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].update = NULL;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$07
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; entities[i].health = 0;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$06
	sta     (ptr1),y
;
; entities[i].prev = i == 0? 0xFF : i - 1;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i
	ora     _i+1
	bne     L04CA
	lda     #$FF
	jmp     L066F
L04CA:	lda     _i
	sec
	sbc     #$01
L066F:	ldy     #$00
	sta     (ptr1),y
;
; entities[i].next = i == ENTITY_COUNT - 1 ? 0x0FF : i + 1;
;
	lda     _i
	ldx     _i+1
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i+1
	bne     L04D3
	lda     _i
	cmp     #$0F
	bne     L04D3
	lda     #$FF
	jmp     L0670
L04D3:	lda     _i
	clc
	adc     #$01
L0670:	iny
	sta     (ptr1),y
;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L04B3
	inx
L04B3:	sta     _i
	stx     _i+1
	jmp     L04AA
;
; freeEntityList = 0;
;
L04AB:	lda     #$00
	sta     _freeEntityList
;
; entityList = 0xFF;
;
	lda     #$FF
	sta     _entityList
;
; missileList = 0xFF;
;
	sta     _missileList
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pushEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pushEntity: near

.segment	"CODE"

;
; void pushEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list != 0xFF) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$FF
	beq     L04DF
;
; entities[id].next = *list;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	jsr     staspidx
;
; entities[*list].prev = id;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; *list = id;
;
L04DF:	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ removeEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_removeEntity: near

.segment	"CODE"

;
; void removeEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list == id) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	ldy     #$02
	cmp     (sp),y
	bne     L067B
;
; if(entities[id].next == 0xFF) {
;
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	cmp     #$FF
	bne     L0679
;
; *list = 0xFF; // empty list
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$FF
	sta     (ptr1),y
;
; } else {
;
	jmp     L04FB
;
; *list = entities[id].next;
;
L0679:	jsr     pushw0sp
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	dey
	jsr     staspidx
;
; entities[*list].prev = 0xFF;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	sta     (ptr1),y
;
; } else {
;
	jmp     L04FB
;
; entities[entities[id].prev].next = entities[id].next;
;
L067B:	lda     (sp),y
	jsr     mulax9
	sta     ptr1
	txa
	clc
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #<(_entities)
	ldx     #$00
	lda     (ptr1),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     staspidx
;
; entities[id].next = 0xFF;
;
L04FB:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	dey
	sta     (ptr1),y
;
; entities[id].prev = 0xFF;
;
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ popEntity (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_popEntity: near

.segment	"CODE"

;
; uint8_t popEntity(uint8_t *list) {
;
	jsr     pushax
;
; uint8_t newId = *list;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	jsr     pusha
;
; removeEntity(newId, list);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _removeEntity
;
; return newId;
;
	ldx     #$00
	lda     (sp,x)
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bulletUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bulletUpdate: near

.segment	"CODE"

;
; entities[currentEntityId].x += entities[currentEntityId].vx;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$02
	jsr     staspidx
;
; entities[currentEntityId].y += entities[currentEntityId].vy;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$03
	jsr     staspidx
;
; if(entities[currentEntityId].vy < 0 && entities[currentEntityId].y + entities[currentEntityId].vy > entities[currentEntityId].y) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	asl     a
	bcc     L0516
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tosicmp0
	beq     L0516
	bcc     L0516
;
; removeEntity(currentEntityId, &entityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _removeEntity
;
; pushEntity(currentEntityId, &freeEntityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _pushEntity
;
; drawSprite(entities[currentEntityId].x, entities[currentEntityId].y, 0x60, 0x00);
;
L0516:	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     #$60
	dey
	sta     (sp),y
	tya
	jmp     _drawSprite

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ spawnBullet (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnBullet: near

.segment	"BSS"

L052C:
	.res	1,$00

.segment	"CODE"

;
; void __fastcall__ spawnBullet(uint8_t x, uint8_t y) {
;
	jsr     pusha
;
; id = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	sta     L052C
;
; if(id != 0xFF) {
;
	cmp     #$FF
	bne     L067E
;
; }
;
	jmp     incsp2
;
; pushEntity(id, &entityList);
;
L067E:	lda     L052C
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[id].x = x;
;
	ldx     #$00
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	iny
	sta     (ptr1),y
;
; entities[id].y = y;
;
	ldx     #$00
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	ldy     #$03
	sta     (ptr1),y
;
; entities[id].vx = 0;
;
	ldx     #$00
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[id].vy = -4;
;
	tax
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FC
	iny
	sta     (ptr1),y
;
; entities[id].health = 255;
;
	ldx     #$00
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	iny
	sta     (ptr1),y
;
; entities[id].update = bulletUpdate;
;
	ldx     #$00
	lda     L052C
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #<(_bulletUpdate)
	iny
	sta     (ptr1),y
	iny
	lda     #>(_bulletUpdate)
	sta     (ptr1),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ playerUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerUpdate: near

.segment	"CODE"

;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L0680
;
; if (entities[currentEntityId].vy > -6) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L054D
	eor     #$80
L054D:	jpl     L0684
;
; entities[currentEntityId].vy -= 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
;
; else if(InputPort1 & BUTTON_DOWN) {
;
	jmp     L0684
L0680:	lda     _InputPort1
	ldx     #$00
	and     #$04
	beq     L0681
;
; if (entities[currentEntityId].vy < 6) {
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L0557
	eor     #$80
L0557:	jpl     L0684
;
; entities[currentEntityId].vy += 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$01
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy > 2) {
;
	jmp     L0684
L0681:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L055F
	eor     #$80
L055F:	asl     a
	ldx     #$00
	bcc     L0682
;
; entities[currentEntityId].vy -= 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy < -2) {
;
	jmp     L0684
L0682:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L0567
	eor     #$80
L0567:	asl     a
	ldx     #$00
	bcc     L0683
;
; entities[currentEntityId].vy += 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L0684
;
; entities[currentEntityId].vy = 0;
;
L0683:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1),y
;
; if(InputPort1 & BUTTON_LEFT) {
;
L0684:	lda     _InputPort1
	and     #$02
	beq     L0685
;
; if (entities[currentEntityId].vx > -6) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FB
	bvs     L0574
	eor     #$80
L0574:	jpl     L0689
;
; --entities[currentEntityId].vx;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L067F
L0685:	lda     _InputPort1
	ldx     #$00
	and     #$01
	beq     L0686
;
; if (entities[currentEntityId].vx < 6) {
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$06
	bvc     L057D
	eor     #$80
L057D:	jpl     L0689
;
; ++entities[currentEntityId].vx;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$01
	clc
	adc     (ptr1),y
;
; } else if(entities[currentEntityId].vx > 2) {
;
	jmp     L067F
L0686:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0584
	eor     #$80
L0584:	asl     a
	ldx     #$00
	bcc     L0687
;
; entities[currentEntityId].vx -= 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vx < -2) {
;
	jmp     L0689
L0687:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L058C
	eor     #$80
L058C:	asl     a
	ldx     #$00
	bcc     L0688
;
; entities[currentEntityId].vx += 2;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L0689
;
; entities[currentEntityId].vx = 0;
;
L0688:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
L067F:	sta     (ptr1),y
;
; if((InputPort1 & BUTTON_B) && !(InputPort1Prev & BUTTON_B)) {
;
L0689:	lda     _InputPort1
	ldx     #$00
	and     #$40
	beq     L068D
	lda     _InputPort1Prev
	and     #$40
	bne     L068D
;
; spawnBullet(entities[currentEntityId].x + 4, entities[currentEntityId].y + 8);
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$04
	jsr     pusha
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     #$08
	jsr     _spawnBullet
;
; if(entities[currentEntityId].vy < 0 && entities[currentEntityId].y + entities[currentEntityId].vy > entities[currentEntityId].y) {
;
	ldx     #$00
L068D:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	asl     a
	ldx     #$00
	jcc     L0690
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tosicmp0
	beq     L0696
	bcc     L0696
;
; entities[currentEntityId].y = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
;
; entities[currentEntityId].vy = 0;
;
	tax
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$05
	sta     (ptr1),y
;
; if(entities[currentEntityId].y + entities[currentEntityId].vy > 218) {
;
L0696:	ldx     #$00
L0690:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	cmp     #$DB
	txa
	sbc     #$00
	ldx     #$00
	bcc     L0691
;
; entities[currentEntityId].y = 218;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$DA
	ldy     #$03
	sta     (ptr1),y
;
; entities[currentEntityId].vy = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$05
	sta     (ptr1),y
;
; if(entities[currentEntityId].vx < 0 && entities[currentEntityId].x + entities[currentEntityId].vx > entities[currentEntityId].x) {
;
	tax
L0691:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	asl     a
	ldx     #$00
	jcc     L0694
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosicmp0
	beq     L0697
	bcc     L0697
;
; entities[currentEntityId].x = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; entities[currentEntityId].vx = 0;
;
	tax
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; if(entities[currentEntityId].x + entities[currentEntityId].vx > 240) {
;
L0697:	ldx     #$00
L0694:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	cmp     #$F1
	txa
	sbc     #$00
	ldx     #$00
	bcc     L0695
;
; entities[currentEntityId].x = 240;
;
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$F0
	ldy     #$02
	sta     (ptr1),y
;
; entities[currentEntityId].vx = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; entities[currentEntityId].x += entities[currentEntityId].vx;
;
	tax
L0695:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$02
	jsr     staspidx
;
; entities[currentEntityId].y += entities[currentEntityId].vy;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$03
	jsr     staspidx
;
; drawMetaSprite(entities[currentEntityId].x, entities[currentEntityId].y, playerSpriteFrames[(FrameCount >> 3) & 0x01]);
;
	jsr     decsp2
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     pusha0
	lda     #$11
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jmp     _drawMetaSprite

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	jsr     decsp1
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L05E8:	lda     _i+1
	cmp     #$00
	bne     L05F0
	lda     _i
	cmp     #$20
L05F0:	bcs     L05E9
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L05E8
	inc     _i+1
	jmp     L05E8
;
; initEntityList();
;
L05E9:	jsr     _initEntityList
;
; bankswitch(0);
;
	lda     #$00
	jsr     _bankswitch
;
; fillBackground();
;
	jsr     _fillBackground
;
; playerId = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	ldy     #$00
	sta     (sp),y
;
; pushEntity(playerId, &entityList);
;
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[playerId].x = 64;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	ldy     #$02
	sta     (ptr1),y
;
; entities[playerId].y = 128;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$80
	iny
	sta     (ptr1),y
;
; entities[playerId].vx = 0;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].vy = 0;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].health = 255;
;
	tax
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	iny
	sta     (ptr1),y
;
; entities[playerId].update = playerUpdate;
;
	ldx     #$00
	lda     (sp,x)
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #<(_playerUpdate)
	iny
	sta     (ptr1),y
	iny
	lda     #>(_playerUpdate)
	sta     (ptr1),y
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; Scroll = 0x108;
;
	ldx     #$01
	sty     _Scroll
	stx     _Scroll+1
;
; WaitFrame();
;
L0620:	jsr     _WaitFrame
;
; currentMetaSpriteId = 0; // might be done in nmi?
;
	lda     #$00
	sta     _currentMetaSpriteId
;
; if(!(FrameCount & 0x00) && mapCurrentLine != 0xFFFF) { // stop when mapCurrentLine == -1
;
	lda     _mapCurrentLine+1
	cmp     #$FF
	bne     L069A
	lda     _mapCurrentLine
	cmp     #$FF
	jeq     L06A1
;
; if(Scroll > 0) {
;
L069A:	lda     _Scroll
	ora     _Scroll+1
	beq     L062D
;
; --Scroll;
;
	lda     _Scroll
	sec
	sbc     #$01
	sta     _Scroll
	bcs     L0631
	dec     _Scroll+1
;
; if(Scroll == 255) {
;
L0631:	lda     _Scroll+1
	bne     L0637
	lda     _Scroll
	cmp     #$FF
	bne     L0637
;
; Scroll = 239;
;
	ldx     #$00
;
; } else {
;
	jmp     L06A3
;
; Scroll = 256 + 239;
;
L062D:	ldx     #$01
L06A3:	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; if((Scroll & 0x0F) == 0x0F && mapCurrentLine != 0xFFFF) {
;
L0637:	lda     _Scroll
	ldx     #$00
	and     #$0F
	cmp     #$0F
	bne     L069E
	lda     _mapCurrentLine+1
	cmp     #$FF
	bne     L069C
	lda     _mapCurrentLine
	cmp     #$FF
	beq     L069E
;
; --mapCurrentLine;
;
L069C:	lda     _mapCurrentLine
	sec
	sbc     #$01
	sta     _mapCurrentLine
	bcs     L0642
	dec     _mapCurrentLine+1
;
; copyBgLine(map, mapCurrentLine);
;
L0642:	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	ldx     _mapCurrentLine+1
	jsr     _copyBgLine
;
; BGDestAddr = (Scroll > 240 ? 0x2800 : 0x2000) + (((Scroll & 0xFF) >> 4) << 6);
;
	lda     _Scroll
	cmp     #$F1
	lda     _Scroll+1
	sbc     #$00
	lda     #$00
	bcc     L0649
	ldx     #$28
	jmp     L069D
L0649:	ldx     #$20
L069D:	sta     ptr1
	stx     ptr1+1
	lda     _Scroll
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	jsr     shlax2
	clc
	adc     ptr1
	sta     _BGDestAddr
	txa
	adc     ptr1+1
	sta     _BGDestAddr+1
;
; currentEntityId = entityList;
;
L06A1:	ldx     #$00
L069E:	lda     _entityList
	sta     _currentEntityId
;
; while(currentEntityId != 0xFF) {
;
	jmp     L06A0
;
; uint8_t next = entities[currentEntityId].next;
;
L069F:	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
;
; entities[currentEntityId].update();
;
	ldx     #$00
	lda     _currentEntityId
	jsr     mulax9
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$08
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     callax
;
; currentEntityId = next;
;
	ldy     #$00
	lda     (sp),y
	sta     _currentEntityId
;
; }
;
	jsr     incsp1
;
; while(currentEntityId != 0xFF) {
;
	ldx     #$00
L06A0:	lda     _currentEntityId
	cmp     #$FF
	bne     L069F
;
; for(i = currentMetaSpriteId; i < 64; i++) {
;
	lda     _currentMetaSpriteId
	sta     _i
	stx     _i+1
L065C:	lda     _i+1
	cmp     #$00
	bne     L0663
	lda     _i
	cmp     #$40
L0663:	bcs     L065D
;
; sprites[i].y = 240;
;
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; for(i = currentMetaSpriteId; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0665
	inx
L0665:	sta     _i
	stx     _i+1
	jmp     L065C
;
; VRAMUpdateReady = 1;
;
L065D:	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L0620

.endproc

