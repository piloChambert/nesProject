;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.importzp	_InputPort1
	.importzp	_InputPort1Prev
	.importzp	_VRAMUpdateReady
	.importzp	_Scroll
	.import		_WaitFrame
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_score
	.export		_spriteZero
	.export		_player
	.export		_ScoreText
	.export		_PALETTE
	.export		_mapWidth
	.export		_map
	.export		_drawStatus
	.export		_drawBackground
	.export		_main

.segment	"DATA"

_score:
	.word	$152D

.segment	"RODATA"

_ScoreText:
	.byte	$53,$63,$6F,$72,$65,$2E,$00
_PALETTE:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$06
	.byte	$15
	.byte	$36
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_mapWidth:
	.byte	$20
_map:
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
.segment	"BSS"
.segment	"OAM"
_spriteZero:
	.res	4,$00
_player:
	.res	4,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ drawStatus (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawStatus: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x40 + 0x04;    
;
	lda     #$44
	sta     $2006
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01D7:	lda     _i+1
	cmp     #$00
	bne     L01DF
	lda     _i
	cmp     #$07
L01DF:	bcs     L01D8
;
; PPU.vram.data = ScoreText[i];
;
	lda     #<(_ScoreText)
	sta     ptr1
	lda     #>(_ScoreText)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for(i = 0; i < sizeof(ScoreText); i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01E1
	inx
L01E1:	sta     _i
	stx     _i+1
	jmp     L01D7
;
; }
;
L01D8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBackground: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0xA0;
;
	lda     #$A0
	sta     $2006
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L01ED:	lda     _i+1
	cmp     #$03
	bne     L01F4
	lda     _i
	cmp     #$40
L01F4:	jcs     L01EE
;
; mapX = (i & 0x1F) >> 1;
;
	lda     _i
	ldx     #$00
	and     #$1F
	lsr     a
	sta     _mapX
	stx     _mapX+1
;
; mapY = (i >> 6);
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax2
	sta     _mapY
	stx     _mapY+1
;
; tileIndex = (map[mapX + (mapY << 6)] & 39) << 1;
;
	lda     _mapY
	ldx     _mapY+1
	jsr     shlax4
	jsr     shlax2
	clc
	adc     _mapX
	sta     ptr1
	txa
	adc     _mapX+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldx     #$00
	and     #$27
	asl     a
	bcc     L0299
	inx
L0299:	sta     _tileIndex
	stx     _tileIndex+1
;
; if((i >> 5) & 0x1) {
;
	lda     _i
	ldx     _i+1
	jsr     shrax4
	jsr     shrax1
	and     #$01
	beq     L0202
;
; tileIndex += 16;
;
	lda     #$10
	clc
	adc     _tileIndex
	sta     _tileIndex
	bcc     L0202
	inc     _tileIndex+1
;
; if(i & 0x1) {
;
L0202:	lda     _i
	and     #$01
	beq     L029A
;
; ++tileIndex;
;
	inc     _tileIndex
	bne     L029A
	inc     _tileIndex+1
;
; PPU.vram.data = (uint8_t)tileIndex;
;
L029A:	lda     _tileIndex
	sta     $2007
;
; for(i = 0; i < 32 * 26; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L01F6
	inx
L01F6:	sta     _i
	stx     _i+1
	jmp     L01ED
;
; PPU.vram.address = 0x23;
;
L01EE:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0215:	lda     _i+1
	cmp     #$00
	bne     L021C
	lda     _i
	cmp     #$40
L021C:	bcs     L0216
;
; PPU.vram.data = i & 0x0F;
;
	lda     _i
	and     #$0F
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L021E
	inx
L021E:	sta     _i
	stx     _i+1
	jmp     L0215
;
; }
;
L0216:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	sta     _i
	sta     _i+1
L0229:	lda     _i+1
	cmp     #$00
	bne     L0231
	lda     _i
	cmp     #$20
L0231:	bcs     L022A
;
; PPU.vram.data = PALETTE[i];
;
	lda     #<(_PALETTE)
	sta     ptr1
	lda     #>(_PALETTE)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < sizeof(PALETTE); ++i ) {
;
	inc     _i
	bne     L0229
	inc     _i+1
	jmp     L0229
;
; drawStatus();
;
L022A:	jsr     _drawStatus
;
; drawBackground();
;
	jsr     _drawBackground
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; spriteZero.x = 72;
;
	lda     #$48
	sta     _spriteZero+3
;
; spriteZero.y = 16;
;
	lda     #$10
	sta     _spriteZero
;
; spriteZero.tile_index = 0xFF;
;
	lda     #$FF
	sta     _spriteZero+1
;
; player.x = 20;
;
	lda     #$14
	sta     _player+3
;
; player.y = 20;
;
	sta     _player
;
; player.tile_index = 0x0;
;
	lda     #$00
	sta     _player+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; PPU.mask = PPUMASK_COLOR | PPUMASK_L8_BSHOW | PPUMASK_L8_SSHOW | PPUMASK_SSHOW | PPUMASK_BSHOW;
;
	lda     #$1E
	sta     $2001
;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; WaitFrame();
;
L0253:	jsr     _WaitFrame
;
; if(PPU.status & 0x40) {
;
	lda     $2002
	and     #$40
	beq     L029B
;
; player.tile_index = 0xFF;
;
	lda     #$FF
;
; player.tile_index = 0x00;            
;
L029B:	sta     _player+1
;
; if (InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L029E
;
; if (player.y > 0) {
;
	lda     _player
	beq     L029E
;
; --player.y;
;
	dec     _player
;
; if(!(InputPort1Prev & BUTTON_UP)) {
;
	lda     _InputPort1Prev
	and     #$08
	bne     L029E
;
; APU.pulse[0].control = 0x0F;
;
	lda     #$0F
	sta     $4000
;
; APU.pulse[0].ramp = 0x01;
;
	lda     #$01
	sta     $4001
;
; APU.pulse[0].period_low = 0x05;
;
	lda     #$05
	sta     $4002
;
; APU.pulse[0].len_period_high = (0x0F << 5) + 0x01;
;
	lda     #$E1
	sta     $4003
;
; if (InputPort1 & BUTTON_DOWN) {
;
L029E:	lda     _InputPort1
	and     #$04
	beq     L029F
;
; if (player.y < 255) {
;
	lda     _player
	cmp     #$FF
	bcs     L029F
;
; ++player.y;
;
	inc     _player
;
; if (InputPort1 & BUTTON_LEFT) {
;
L029F:	lda     _InputPort1
	and     #$02
	beq     L02A0
;
; if (player.x > 0) {
;
	lda     _player+3
	beq     L0281
;
; --player.x;
;
	dec     _player+3
;
; if(Scroll == 0x0000) {
;
L0281:	lda     _Scroll
	ora     _Scroll+1
	bne     L0284
;
; Scroll = 0x01FF;
;
	ldx     #$01
	lda     #$FF
	sta     _Scroll
	stx     _Scroll+1
;
; } else {
;
	jmp     L02A0
;
; --Scroll;
;
L0284:	lda     _Scroll
	sec
	sbc     #$01
	sta     _Scroll
	bcs     L02A0
	dec     _Scroll+1
;
; if (InputPort1 & BUTTON_RIGHT) {
;
L02A0:	lda     _InputPort1
	and     #$01
	beq     L02A1
;
; if (player.x < 255) {
;
	lda     _player+3
	cmp     #$FF
	bcs     L028E
;
; ++player.x;
;
	inc     _player+3
;
; ++Scroll;
;
L028E:	inc     _Scroll
	bne     L0292
	inc     _Scroll+1
;
; if(Scroll > 0x200) {
;
L0292:	lda     _Scroll
	cmp     #$01
	lda     _Scroll+1
	sbc     #$02
	bcc     L02A1
;
; Scroll = 0x0000;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; VRAMUpdateReady = 1;
;
L02A1:	lda     #$01
	sta     _VRAMUpdateReady
;
; while (1) {
;
	jmp     L0253

.endproc

