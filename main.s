;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_abs
	.importzp	_FrameCount
	.importzp	_InputPort1
	.importzp	_InputPort1Prev
	.importzp	_VRAMUpdateReady
	.importzp	_Scroll
	.importzp	_BGDestAddr
	.importzp	_BGBuffer
	.import		_WaitFrame
	.import		_bankswitch
	.import		_flushBGBuffer
	.export		_endLoop
	.export		_i
	.export		_x
	.export		_y
	.export		_mapX
	.export		_mapY
	.export		_tileIndex
	.export		_tile
	.export		_tileIdx
	.export		_currentEntityId
	.export		_currentMetaSpriteId
	.export		_mapCurrentLine
	.export		_timer
	.export		_scrollIncrement
	.export		_playerId
	.export		_entities
	.export		_nextBullet
	.export		_nextArrow
	.export		_freeEntityList
	.export		_entityList
	.export		_playerBlink
	.export		_sprites
	.export		_titlePalette
	.export		_titleScreen
	.export		_copyTitleScreen
	.export		_mapPalette
	.export		_map
	.export		_mapLineCount
	.export		_copyBgLine
	.export		_fillBackground
	.export		_gameOverText
	.export		_playerSpriteFrames
	.export		_drawMetaSprite
	.export		_drawSprite
	.export		_initEntityList
	.export		_pushEntity
	.export		_removeEntity
	.export		_popEntity
	.export		_spawnBullet
	.export		_spawnArrow
	.export		_fireUpdate
	.export		_knightWalkUpdate
	.export		_knightShootUpdate
	.export		_spawnKnight
	.export		_playerUpdate
	.export		_loadPalette
	.export		_main

.segment	"DATA"

_nextBullet:
	.byte	$00
_nextArrow:
	.byte	$00
_freeEntityList:
	.byte	$FF
_entityList:
	.byte	$FF

.segment	"RODATA"

_titlePalette:
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$06
	.byte	$0F
	.byte	$2D
	.byte	$2D
	.byte	$2D
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$30
	.byte	$0F
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_titleScreen:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$85
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$00
	.byte	$88
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$26
	.byte	$27
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$36
	.byte	$37
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$76
	.byte	$77
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$A0
	.byte	$A1
	.byte	$00
	.byte	$98
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$B6
	.byte	$B9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BE
	.byte	$BC
	.byte	$BA
	.byte	$BB
	.byte	$B6
	.byte	$B7
	.byte	$C9
	.byte	$B5
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_mapPalette:
	.byte	$1A
	.byte	$29
	.byte	$09
	.byte	$17
	.byte	$1A
	.byte	$2D
	.byte	$20
	.byte	$1D
	.byte	$1A
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$1A
	.byte	$19
	.byte	$29
	.byte	$39
	.byte	$1A
	.byte	$16
	.byte	$05
	.byte	$27
	.byte	$1A
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$1A
	.byte	$05
	.byte	$27
	.byte	$37
	.byte	$1A
	.byte	$0F
	.byte	$0F
	.byte	$0F
_map:
	.byte	$06
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$06
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
_mapLineCount:
	.word	$0078
_gameOverText:
	.byte	$CA
	.byte	$BA
	.byte	$CB
	.byte	$B7
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$CC
	.byte	$B7
	.byte	$B6
_playerSpriteFrames:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$08
	.byte	$08
	.byte	$37
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$08
	.byte	$08
	.byte	$39
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$08
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$08
	.byte	$08
	.byte	$3B
	.byte	$7F
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$08
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$08
	.byte	$3C
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$7F

.segment	"BSS"

.segment	"ZEROPAGE"
_endLoop:
	.res	1,$00
_i:
	.res	2,$00
_x:
	.res	2,$00
_y:
	.res	2,$00
_mapX:
	.res	2,$00
_mapY:
	.res	2,$00
_tileIndex:
	.res	2,$00
_tile:
	.res	1,$00
_tileIdx:
	.res	1,$00
_currentEntityId:
	.res	1,$00
_currentMetaSpriteId:
	.res	1,$00
_mapCurrentLine:
	.res	2,$00
_timer:
	.res	2,$00
_scrollIncrement:
	.res	1,$00
_playerId:
	.res	1,$00
_entities:
	.res	40,$00
_playerBlink:
	.res	1,$00
.segment	"BSS"
.segment	"OAM"
_sprites:
	.res	256,$00
.segment	"BSS"

; ---------------------------------------------------------------
; void __near__ copyTitleScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyTitleScreen: near

.segment	"CODE"

;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 30 * 32; i++) {
;
	sta     _i
	sta     _i+1
L03FC:	lda     _i+1
	cmp     #$03
	bne     L0403
	lda     _i
	cmp     #$C0
L0403:	bcs     L03FD
;
; PPU.vram.data = titleScreen[i];
;
	lda     #<(_titleScreen)
	sta     ptr1
	lda     #>(_titleScreen)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for(i = 0; i < 30 * 32; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0405
	inx
L0405:	sta     _i
	stx     _i+1
	jmp     L03FC
;
; PPU.vram.address = 0x23;
;
L03FD:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 40; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0410:	lda     _i+1
	cmp     #$00
	bne     L0417
	lda     _i
	cmp     #$28
L0417:	bcs     L0411
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 40; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0419
	inx
L0419:	sta     _i
	stx     _i+1
	jmp     L0410
;
; for(i = 40; i < 48; i++) {
;
L0411:	ldx     #$00
	lda     #$28
L10DD:	sta     _i
	stx     _i+1
	lda     _i+1
	cmp     #$00
	bne     L0424
	lda     _i
	cmp     #$30
L0424:	bcs     L041E
;
; PPU.vram.data = 0xAA;
;
	lda     #$AA
	sta     $2007
;
; for(i = 40; i < 48; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L10DD
	inx
	jmp     L10DD
;
; for(i = 48; i < 64; i++) {
;
L041E:	ldx     #$00
	lda     #$30
L10DE:	sta     _i
	stx     _i+1
	lda     _i+1
	cmp     #$00
	bne     L0431
	lda     _i
	cmp     #$40
L0431:	bcs     L042B
;
; PPU.vram.data = 0x55;
;
	lda     #$55
	sta     $2007
;
; for(i = 48; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L10DE
	inx
	jmp     L10DE
;
; }
;
L042B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ copyBgLine (__near__ const unsigned char *, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyBgLine: near

.segment	"BSS"

L0BDA:
	.res	2,$00

.segment	"CODE"

;
; void __fastcall__ copyBgLine(const uint8_t *buffer, uint16_t line) {
;
	jsr     pushax
;
; ptr = &BGBuffer;
;
	lda     #<(_BGBuffer)
	sta     L0BDA
	lda     #>(_BGBuffer)
	sta     L0BDA+1
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     #$00
L10E1:	sta     _tile
	cmp     #$40
	bcs     L0BDE
;
; tileIdx = buffer[line * 16 + ((tile & 0x1F) >> 1)] << 1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _tile
	and     #$1F
	lsr     a
	clc
	adc     ptr1
	pha
	tya
	adc     ptr1+1
	tax
	pla
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	sta     _tileIdx
;
; if(tile & 0x1) {
;
	lda     _tile
	and     #$01
	beq     L10E0
;
; ++tileIdx;
;
	inc     _tileIdx
;
; if(tile >= 32) {
;
L10E0:	lda     _tile
	cmp     #$20
	bcc     L0BED
;
; tileIdx += 0x10;
;
	lda     #$10
	clc
	adc     _tileIdx
	sta     _tileIdx
;
; (*ptr++) = tileIdx;
;
L0BED:	lda     L0BDA
	ldx     L0BDA+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0BF3
	inx
L0BF3:	sta     L0BDA
	stx     L0BDA+1
	lda     _tileIdx
	sta     (regsave),y
;
; for(tile = 0; tile < 64; tile++) {
;
	lda     _tile
	clc
	adc     #$01
	jmp     L10E1
;
; }
;
L0BDE:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ fillBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fillBackground: near

.segment	"CODE"

;
; mapCurrentLine = mapLineCount - 30;
;
	lda     _mapLineCount
	ldx     _mapLineCount+1
	sec
	sbc     #$1E
	bcs     L0BF8
	dex
L0BF8:	sta     _mapCurrentLine
	stx     _mapCurrentLine+1
;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L0BFF:	lda     _i+1
	cmp     #$00
	bne     L0C06
	lda     _i
	cmp     #$0F
L0C06:	bcs     L0C00
;
; copyBgLine(map, mapCurrentLine + i);
;
	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	clc
	adc     _i
	pha
	lda     _mapCurrentLine+1
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; flushBGBuffer();
;
	ldy     #$00
	jsr     _flushBGBuffer
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0C08
	inx
L0C08:	sta     _i
	stx     _i+1
	jmp     L0BFF
;
; PPU.vram.address = 0x28;
;
L0C00:	lda     #$28
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 15; i++) {
;
	sta     _i
	sta     _i+1
L0C13:	lda     _i+1
	cmp     #$00
	bne     L0C1A
	lda     _i
	cmp     #$0F
L0C1A:	bcs     L0C14
;
; copyBgLine(map, mapCurrentLine + 15 + i);
;
	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	ldx     _mapCurrentLine+1
	clc
	adc     #$0F
	bcc     L10E2
	inx
	clc
L10E2:	adc     _i
	pha
	txa
	adc     _i+1
	tax
	pla
	jsr     _copyBgLine
;
; flushBGBuffer();
;
	ldy     #$00
	jsr     _flushBGBuffer
;
; for(i = 0; i < 15; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0C1C
	inx
L0C1C:	sta     _i
	stx     _i+1
	jmp     L0C13
;
; PPU.vram.address = 0x23;
;
L0C14:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0C28:	lda     _i+1
	cmp     #$00
	bne     L0C2F
	lda     _i
	cmp     #$40
L0C2F:	bcs     L0C29
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0C31
	inx
L0C31:	sta     _i
	stx     _i+1
	jmp     L0C28
;
; PPU.vram.address = 0x2B;
;
L0C29:	lda     #$2B
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0C3B:	lda     _i+1
	cmp     #$00
	bne     L0C42
	lda     _i
	cmp     #$40
L0C42:	bcs     L0C3C
;
; PPU.vram.data = 0xFF;
;
	lda     #$FF
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0C44
	inx
L0C44:	sta     _i
	stx     _i+1
	jmp     L0C3B
;
; }
;
L0C3C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ drawMetaSprite (unsigned char, unsigned char, unsigned char, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawMetaSprite: near

.segment	"CODE"

;
; void __fastcall__ drawMetaSprite(uint8_t x, uint8_t y, uint8_t attr, const uint8_t *data) {
;
	jsr     pushax
;
; const uint8_t *ptr = data;
;
	jsr     pushw0sp
;
; while(*ptr != 127 && currentMetaSpriteId != 0) {
;
	jmp     L0CA5
;
; if(x + *ptr < 255) {
;
L0CA3:	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1,x)
	jsr     tosadda0
	cpx     #$00
	bne     L0CAB
	cmp     #$FF
L0CAB:	jcs     L0CA9
;
; sprites[currentMetaSpriteId].x = x + *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CB0
	inx
L0CB0:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$03
	jsr     staspidx
;
; sprites[currentMetaSpriteId].y = y + *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CB5
	inx
L0CB5:	jsr     staxysp
	ldx     #$00
	lda     (regsave,x)
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; sprites[currentMetaSpriteId].tile_index = *(ptr++);
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	tay
	txa
	adc     #>(_sprites)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CBA
	inx
L0CBA:	jsr     staxysp
	ldy     #$00
	lda     (regsave),y
	iny
	jsr     staspidx
;
; sprites[currentMetaSpriteId].attributes = attr;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$04
	lda     (sp),y
	ldy     #$02
	sta     (ptr1),y
;
; currentMetaSpriteId--;
;
	lda     _currentMetaSpriteId
	sec
	sbc     #$01
	sta     _currentMetaSpriteId
;
; } else {
;
	jmp     L0CA5
;
; ptr += 4; 
;
L0CA9:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
;
; while(*ptr != 127 && currentMetaSpriteId != 0) {
;
L0CA5:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$7F
	beq     L10E3
	lda     _currentMetaSpriteId
	jne     L0CA3
	jmp     incsp7
;
; }
;
L10E3:	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ drawSprite (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprite: near

.segment	"CODE"

;
; void __fastcall__ drawSprite(uint8_t x, uint8_t y, uint8_t tile, uint8_t attr) {
;
	jsr     pusha
;
; if(currentMetaSpriteId == 0)
;
	lda     _currentMetaSpriteId
;
; return;
;
	beq     L0CC2
;
; sprites[currentMetaSpriteId].x = x;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].y = y;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].tile_index = tile;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	iny
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[currentMetaSpriteId].attributes = attr;
;
	ldx     #$00
	lda     _currentMetaSpriteId
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$02
	sta     (ptr1),y
;
; currentMetaSpriteId--;
;
	lda     _currentMetaSpriteId
	sec
	sbc     #$01
	sta     _currentMetaSpriteId
;
; }
;
L0CC2:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ initEntityList (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initEntityList: near

.segment	"CODE"

;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L0CD3:	lda     _i+1
	cmp     #$00
	bne     L0CDA
	lda     _i
	cmp     #$05
L0CDA:	jcs     L0CD4
;
; entities[i].x = 0;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; entities[i].y = 0;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].vx = 0;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].vy = 0;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[i].kind = 0xFF;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$07
	sta     (ptr1),y
;
; entities[i].health = 0;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; entities[i].prev = i == 0? 0xFF : i - 1;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i
	ora     _i+1
	bne     L0CF3
	lda     #$FF
	jmp     L10E6
L0CF3:	lda     _i
	sec
	sbc     #$01
L10E6:	ldy     #$00
	sta     (ptr1),y
;
; entities[i].next = i == ENTITY_COUNT - 1 ? 0xFF : i + 1;
;
	lda     _i
	ldx     _i+1
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     _i+1
	bne     L0CFC
	lda     _i
	cmp     #$04
	bne     L0CFC
	lda     #$FF
	jmp     L10E7
L0CFC:	lda     _i
	clc
	adc     #$01
L10E7:	iny
	sta     (ptr1),y
;
; for(i = 0; i < ENTITY_COUNT; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0CDC
	inx
L0CDC:	sta     _i
	stx     _i+1
	jmp     L0CD3
;
; freeEntityList = 0;
;
L0CD4:	lda     #$00
	sta     _freeEntityList
;
; entityList = 0xFF;
;
	lda     #$FF
	sta     _entityList
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pushEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pushEntity: near

.segment	"CODE"

;
; void pushEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list != 0xFF) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	cmp     #$FF
	beq     L0D06
;
; entities[id].next = *list;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	iny
	jsr     staspidx
;
; entities[*list].prev = id;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; *list = id;
;
L0D06:	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ removeEntity (unsigned char, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_removeEntity: near

.segment	"CODE"

;
; void removeEntity(uint8_t id, uint8_t *list) {
;
	jsr     pushax
;
; if(*list == id) {
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	ldy     #$02
	cmp     (sp),y
	bne     L10F2
;
; if(entities[id].next == 0xFF) {
;
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	cmp     #$FF
	bne     L10F0
;
; *list = 0xFF; // empty list
;
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     #$FF
	sta     (ptr1),y
;
; } else {
;
	jmp     L0D22
;
; *list = entities[id].next;
;
L10F0:	lda     (sp),y
	sta     sreg+1
	dey
	lda     (sp),y
	sta     sreg
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sreg),y
;
; entities[*list].prev = 0xFF;
;
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	sta     (ptr1),y
;
; } else {
;
	jmp     L0D22
;
; entities[entities[id].prev].next = entities[id].next;
;
L10F2:	lda     (sp),y
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #<(_entities)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     sreg
	txa
	adc     #>(_entities)
	sta     sreg+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sreg),y
;
; entities[entities[id].next].prev = entities[id].prev;
;
	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     sreg
	txa
	adc     #>(_entities)
	sta     sreg+1
	ldx     #$00
	iny
	lda     (sp),y
	jsr     aslax3
	sta     ptr1
	txa
	clc
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #<(_entities)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; entities[id].next = 0xFF;
;
L0D22:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	dey
	sta     (ptr1),y
;
; entities[id].prev = 0xFF;
;
	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ popEntity (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_popEntity: near

.segment	"CODE"

;
; uint8_t popEntity(uint8_t *list) {
;
	jsr     pushax
;
; uint8_t newId = *list;
;
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	jsr     pusha
;
; if(newId != 0xFF)
;
	ldx     #$00
	lda     (sp,x)
	cmp     #$FF
	beq     L10F4
;
; removeEntity(newId, list);
;
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _removeEntity
;
; return newId;
;
	ldx     #$00
L10F4:	lda     (sp,x)
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ spawnBullet (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnBullet: near

.segment	"CODE"

;
; void __fastcall__ spawnBullet(uint8_t x, uint8_t y) {
;
	jsr     pusha
;
; if(sprites[BULLET_SPRITE + nextBullet].y > 240) {
;
	ldx     #$00
	lda     _nextBullet
	clc
	adc     #$38
	bcc     L0D3F
	inx
L0D3F:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	cmp     #$F1
	bcs     L10F5
;
; }
;
	jmp     incsp2
;
; sprites[BULLET_SPRITE + nextBullet].x = x;
;
L10F5:	ldx     #$00
	lda     _nextBullet
	clc
	adc     #$38
	bcc     L0D42
	inx
L0D42:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	sta     (ptr1),y
;
; sprites[BULLET_SPRITE + nextBullet].y = y;
;
	ldx     #$00
	lda     _nextBullet
	clc
	adc     #$38
	bcc     L0D46
	inx
L0D46:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[BULLET_SPRITE + nextBullet].tile_index = 0x60;
;
	ldx     #$00
	lda     _nextBullet
	clc
	adc     #$38
	bcc     L0D4A
	inx
L0D4A:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$60
	iny
	sta     (ptr1),y
;
; sprites[BULLET_SPRITE + nextBullet].attributes = 0x02;
;
	ldx     #$00
	lda     _nextBullet
	clc
	adc     #$38
	bcc     L0D4E
	inx
L0D4E:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$02
	iny
	sta     (ptr1),y
;
; nextBullet = (nextBullet + 1) & 0x3;
;
	lda     _nextBullet
	clc
	adc     #$01
	and     #$03
	sta     _nextBullet
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ spawnArrow (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnArrow: near

.segment	"CODE"

;
; void __fastcall__ spawnArrow(uint8_t x, uint8_t y) {
;
	jsr     pusha
;
; if(sprites[ARROW_SPRITE + nextArrow].y > 240) {
;
	ldx     #$00
	lda     _nextArrow
	clc
	adc     #$3C
	bcc     L0D58
	inx
L0D58:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	cmp     #$F1
	bcs     L10F6
;
; }
;
	jmp     incsp2
;
; sprites[ARROW_SPRITE + nextArrow].x = x;
;
L10F6:	ldx     #$00
	lda     _nextArrow
	clc
	adc     #$3C
	bcc     L0D5B
	inx
L0D5B:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	ldy     #$03
	sta     (ptr1),y
;
; sprites[ARROW_SPRITE + nextArrow].y = y;
;
	ldx     #$00
	lda     _nextArrow
	clc
	adc     #$3C
	bcc     L0D5F
	inx
L0D5F:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; sprites[ARROW_SPRITE + nextArrow].tile_index = 0x70;
;
	ldx     #$00
	lda     _nextArrow
	clc
	adc     #$3C
	bcc     L0D63
	inx
L0D63:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$70
	iny
	sta     (ptr1),y
;
; sprites[ARROW_SPRITE + nextArrow].attributes = 0x01;
;
	ldx     #$00
	lda     _nextArrow
	clc
	adc     #$3C
	bcc     L0D67
	inx
L0D67:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	tya
	iny
	sta     (ptr1),y
;
; nextArrow = (nextArrow + 1) & 0x3;
;
	lda     _nextArrow
	clc
	adc     #$01
	and     #$03
	sta     _nextArrow
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ fireUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fireUpdate: near

.segment	"CODE"

;
; entities[currentEntityId].y += scrollIncrement;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     _scrollIncrement
	jsr     staspidx
;
; if(!(FrameCount & 0x03)) {
;
	lda     _FrameCount
	ldx     #$00
	and     #$03
	bne     L10F8
;
; ++entities[currentEntityId].health;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if(entities[currentEntityId].health == 16 || entities[currentEntityId].y > 240) {
;
	ldx     #$00
L10F8:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	cmp     #$10
	beq     L10F9
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$F1
	bcc     L0D76
;
; removeEntity(currentEntityId, &entityList);
;
L10F9:	lda     _currentEntityId
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _removeEntity
;
; pushEntity(currentEntityId, &freeEntityList);            
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _pushEntity
;
; drawSprite(entities[currentEntityId].x, entities[currentEntityId].y, 0xD0 + entities[currentEntityId].health, 0x02);
;
L0D76:	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	clc
	adc     #$D0
	ldy     #$00
	sta     (sp),y
	lda     #$02
	jmp     _drawSprite

.endproc

; ---------------------------------------------------------------
; void __near__ knightWalkUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_knightWalkUpdate: near

.segment	"CODE"

;
; entities[currentEntityId].y += scrollIncrement;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     _scrollIncrement
	jsr     staspidx
;
; if(!(FrameCount & 0x1)) {
;
	lda     _FrameCount
	ldx     #$00
	and     #$01
	jne     L10FB
;
; if(entities[currentEntityId].x < entities[playerId].x + 8)
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L0D95
	inx
L0D95:	jsr     tosicmp
	bcs     L0D91
;
; entities[currentEntityId].x += 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if(entities[currentEntityId].x > entities[playerId].x + 8)
;
L0D91:	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L0D9D
	inx
L0D9D:	jsr     tosicmp
	bcc     L0D99
	beq     L0D99
;
; entities[currentEntityId].x -= 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(entities[currentEntityId].y > 240) {
;
L0D99:	ldx     #$00
L10FB:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$F1
	ldx     #$00
	bcc     L10FC
;
; removeEntity(currentEntityId, &entityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _removeEntity
;
; pushEntity(currentEntityId, &freeEntityList);
;
	lda     _currentEntityId
	jsr     pusha
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _pushEntity
;
; --entities[currentEntityId].health;
;
	ldx     #$00
L10FC:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(entities[currentEntityId].health == 0) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	bne     L10FD
;
; entities[currentEntityId].health = 64;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	sta     (ptr1),y
;
; entities[currentEntityId].kind = 3;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$03
	iny
	sta     (ptr1),y
;
; for(i = 0; i < 4; i++) {
;
L10FD:	lda     #$00
	sta     _i
	sta     _i+1
L0DB5:	lda     _i+1
	cmp     #$00
	bne     L0DBC
	lda     _i
	cmp     #$04
L0DBC:	jcs     L0DB6
;
; if(abs(sprites[BULLET_SPRITE + i].x - entities[currentEntityId].x) < 8 && abs(sprites[BULLET_SPRITE + i].y - entities[currentEntityId].y) < 8) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L0DC3
	inx
L0DC3:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0DC5
	eor     #$80
L0DC5:	bpl     L0DB7
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L0DC9
	inx
L0DC9:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0DCB
	eor     #$80
L0DCB:	bpl     L0DB7
;
; entities[currentEntityId].kind = 2;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$02
	ldy     #$07
	sta     (ptr1),y
;
; entities[currentEntityId].health = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; for(i = 0; i < 4; i++) {
;
L0DB7:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0DBE
	inx
L0DBE:	sta     _i
	stx     _i+1
	jmp     L0DB5
;
; drawSprite(entities[currentEntityId].x, entities[currentEntityId].y, ((FrameCount >> 3) & 0x03) +  0x40, 0x01);
;
L0DB6:	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	and     #$03
	clc
	adc     #$40
	dey
	sta     (sp),y
	lda     #$01
	jmp     _drawSprite

.endproc

; ---------------------------------------------------------------
; void __near__ knightShootUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_knightShootUpdate: near

.segment	"CODE"

;
; entities[currentEntityId].y += scrollIncrement;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	clc
	adc     _scrollIncrement
	jsr     staspidx
;
; --entities[currentEntityId].health;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if(entities[currentEntityId].health == 32) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	cmp     #$20
	bne     L1102
;
; spawnArrow(entities[currentEntityId].x, entities[currentEntityId].y);
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     _spawnArrow
;
; if(entities[currentEntityId].health == 0) {
;
	ldx     #$00
L1102:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	ldx     #$00
	lda     (ptr1),y
	bne     L1103
;
; entities[currentEntityId].health = 64;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	sta     (ptr1),y
;
; entities[currentEntityId].kind = 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$01
	iny
	sta     (ptr1),y
;
; for(i = 0; i < 4; i++) {
;
L1103:	lda     #$00
	sta     _i
	sta     _i+1
L0DF4:	lda     _i+1
	cmp     #$00
	bne     L0DFB
	lda     _i
	cmp     #$04
L0DFB:	jcs     L0DF5
;
; if(abs(sprites[BULLET_SPRITE + i].x - entities[currentEntityId].x) < 8 && abs(sprites[BULLET_SPRITE + i].y - entities[currentEntityId].y) < 8) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L0E02
	inx
L0E02:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0E04
	eor     #$80
L0E04:	jpl     L0DF6
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L0E08
	inx
L0E08:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0E0A
	eor     #$80
L0E0A:	bpl     L0DF6
;
; entities[currentEntityId].kind = 2;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$02
	ldy     #$07
	sta     (ptr1),y
;
; entities[currentEntityId].health = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; sprites[BULLET_SPRITE + i].y = 241;
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L0E14
	inx
L0E14:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$F1
	ldy     #$00
	sta     (ptr1),y
;
; for(i = 0; i < 4; i++) {
;
L0DF6:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0DFD
	inx
L0DFD:	sta     _i
	stx     _i+1
	jmp     L0DF4
;
; drawSprite(entities[currentEntityId].x, entities[currentEntityId].y, 0x40, 0x01);
;
L0DF5:	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$01
	jmp     _drawSprite

.endproc

; ---------------------------------------------------------------
; void __near__ spawnKnight (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_spawnKnight: near

.segment	"CODE"

;
; void spawnKnight(uint8_t x, uint8_t y) {
;
	jsr     pusha
;
; uint8_t id = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	jsr     pusha
;
; if(id != 0xFF) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$FF
	bne     L1107
;
; }
;
	jmp     incsp3
;
; pushEntity(id, &entityList);
;
L1107:	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[id].x = x;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	sta     (ptr1),y
;
; entities[id].y = y;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	dey
	lda     (sp),y
	ldy     #$03
	sta     (ptr1),y
;
; entities[id].vx = 0;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[id].vy = 0;
;
	tax
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[id].health = 24;
;
	tax
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$18
	iny
	sta     (ptr1),y
;
; entities[id].kind = 1;
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$01
	iny
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ playerUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_playerUpdate: near

.segment	"BSS"

L0E38:
	.res	1,$00

.segment	"CODE"

;
; if(InputPort1 & BUTTON_UP) {
;
	lda     _InputPort1
	and     #$08
	beq     L1109
;
; if (entities[currentEntityId].vy > -2) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FF
	bvs     L0E3E
	eor     #$80
L0E3E:	jpl     L110D
;
; entities[currentEntityId].vy -= 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
;
; else if(InputPort1 & BUTTON_DOWN) {
;
	jmp     L110D
L1109:	lda     _InputPort1
	ldx     #$00
	and     #$04
	beq     L110A
;
; if (entities[currentEntityId].vy < 2) {
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$02
	bvc     L0E48
	eor     #$80
L0E48:	jpl     L110D
;
; entities[currentEntityId].vy += 1;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$01
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy > 2) {
;
	jmp     L110D
L110A:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0E50
	eor     #$80
L0E50:	asl     a
	ldx     #$00
	bcc     L110B
;
; entities[currentEntityId].vy -= 2;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vy < -2) {
;
	jmp     L110D
L110B:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L0E58
	eor     #$80
L0E58:	asl     a
	ldx     #$00
	bcc     L110C
;
; entities[currentEntityId].vy += 2;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$05
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L110D
;
; entities[currentEntityId].vy = 0;
;
L110C:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1),y
;
; if(InputPort1 & BUTTON_LEFT) {
;
L110D:	lda     _InputPort1
	and     #$02
	beq     L110E
;
; if (entities[currentEntityId].vx > -2) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FF
	bvs     L0E65
	eor     #$80
L0E65:	asl     a
	ldx     #$00
	jcc     L1112
;
; --entities[currentEntityId].vx;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$01
;
; } else if(InputPort1 & BUTTON_RIGHT) {
;
	jmp     L1108
L110E:	lda     _InputPort1
	ldx     #$00
	and     #$01
	beq     L110F
;
; if (entities[currentEntityId].vx < 2) {
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$02
	bvc     L0E6E
	eor     #$80
L0E6E:	asl     a
	ldx     #$00
	jcc     L1112
;
; ++entities[currentEntityId].vx;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$01
	clc
	adc     (ptr1),y
;
; } else if(entities[currentEntityId].vx > 2) {
;
	jmp     L1108
L110F:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0E75
	eor     #$80
L0E75:	asl     a
	ldx     #$00
	bcc     L1110
;
; entities[currentEntityId].vx -= 2;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$02
	jsr     staspidx
;
; } else if(entities[currentEntityId].vx < -2) {
;
	jmp     L0E81
L1110:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L0E7D
	eor     #$80
L0E7D:	asl     a
	ldx     #$00
	bcc     L1111
;
; entities[currentEntityId].vx += 2;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	ldy     #$04
	jsr     ldaidx
	clc
	adc     #$02
	jsr     staspidx
;
; } else {
;
	jmp     L0E81
;
; entities[currentEntityId].vx = 0;
;
L1111:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
L1108:	sta     (ptr1),y
;
; if(entities[currentEntityId].vy < 0 && entities[currentEntityId].y + entities[currentEntityId].vy - 16 > entities[currentEntityId].y) {
;
L0E81:	ldx     #$00
L1112:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	asl     a
	ldx     #$00
	jcc     L1115
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	sec
	sbc     #$10
	bcs     L0E8B
	dex
L0E8B:	jsr     pushax
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tosicmp0
	beq     L1127
	bcc     L1127
;
; entities[currentEntityId].y = 16;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$10
	ldy     #$03
	sta     (ptr1),y
;
; entities[currentEntityId].vy = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$05
	sta     (ptr1),y
;
; if(entities[currentEntityId].y + entities[currentEntityId].vy > 218) {
;
L1127:	ldx     #$00
L1115:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	cmp     #$DB
	txa
	sbc     #$00
	ldx     #$00
	bcc     L1116
;
; entities[currentEntityId].y = 218;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$DA
	ldy     #$03
	sta     (ptr1),y
;
; entities[currentEntityId].vy = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$05
	sta     (ptr1),y
;
; if(entities[currentEntityId].vx < 0 && entities[currentEntityId].x + entities[currentEntityId].vx > entities[currentEntityId].x) {
;
	tax
L1116:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	asl     a
	ldx     #$00
	jcc     L1119
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosicmp0
	beq     L1128
	bcc     L1128
;
; entities[currentEntityId].x = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$02
	sta     (ptr1),y
;
; entities[currentEntityId].vx = 0;
;
	tax
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; if(entities[currentEntityId].x + entities[currentEntityId].vx > 240) {
;
L1128:	ldx     #$00
L1119:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	cmp     #$F1
	txa
	sbc     #$00
	ldx     #$00
	bcc     L111A
;
; entities[currentEntityId].x = 240;
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$F0
	ldy     #$02
	sta     (ptr1),y
;
; entities[currentEntityId].vx = 0;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; entities[currentEntityId].x += entities[currentEntityId].vx;
;
	tax
L111A:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$02
	jsr     staspidx
;
; entities[currentEntityId].y += entities[currentEntityId].vy;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$05
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$03
	jsr     staspidx
;
; if((InputPort1 & BUTTON_B) && !(InputPort1Prev & BUTTON_B)) {
;
	lda     _InputPort1
	ldx     #$00
	and     #$40
	beq     L111F
	lda     _InputPort1Prev
	and     #$40
	bne     L1129
;
; spawnBullet(entities[currentEntityId].x + 4, entities[currentEntityId].y - 8);
;
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     #$04
	jsr     pusha
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	sec
	sbc     #$08
	jsr     _spawnBullet
;
; for(i = 0; i < 4; i++) {
;
L1129:	lda     #$00
L111F:	sta     _i
	sta     _i+1
L0ECB:	lda     _i+1
	cmp     #$00
	bne     L0ED2
	lda     _i
	cmp     #$04
L0ED2:	jcs     L0ECC
;
; if(abs(sprites[ARROW_SPRITE + i].x - entities[currentEntityId].x) < 8 && abs(sprites[ARROW_SPRITE + i].y - entities[currentEntityId].y) < 8) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$3C
	bcc     L0ED9
	inx
L0ED9:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0EDB
	eor     #$80
L0EDB:	jpl     L0ECD
	lda     _i
	ldx     _i+1
	clc
	adc     #$3C
	bcc     L0EDF
	inx
L0EDF:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	jsr     pusha0
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tossuba0
	jsr     _abs
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0EE1
	eor     #$80
L0EE1:	bpl     L0ECD
;
; --entities[currentEntityId].health;
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; sprites[ARROW_SPRITE + i].y = 241;
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$3C
	bcc     L0EE7
	inx
L0EE7:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$F1
	ldy     #$00
	sta     (ptr1),y
;
; playerBlink = 255;
;
	lda     #$FF
	sta     _playerBlink
;
; if(entities[currentEntityId].health == 0) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	bne     L0ECD
;
; endLoop = 1; 
;
	lda     #$01
	sta     _endLoop
;
; for(i = 0; i < 4; i++) {
;
L0ECD:	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0ED4
	inx
L0ED4:	sta     _i
	stx     _i+1
	jmp     L0ECB
;
; if((playerBlink & 0x3)) {
;
L0ECC:	lda     _playerBlink
	and     #$03
	beq     L1124
;
; pal = 0x03;
;
	lda     #$03
	sta     L0E38
;
; --playerBlink;
;
	ldx     #$00
	dec     _playerBlink
;
; } else {
;
	jmp     L1125
;
; pal = 0x00;
;
L1124:	sta     L0E38
;
; if(entities[currentEntityId].vx > 2) {
;
	tax
L1125:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$03
	bvs     L0EFC
	eor     #$80
L0EFC:	asl     a
	ldx     #$00
	bcc     L1126
;
; drawMetaSprite(entities[currentEntityId].x, entities[currentEntityId].y, pal, playerSpriteFrames[((FrameCount >> 3) & 0x01) + 4]);
;
	jsr     decsp3
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     L0E38
	dey
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L0F07
	inx
L0F07:	jsr     pushax
	lda     #$0D
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jmp     _drawMetaSprite
;
; } else if(entities[currentEntityId].vx < -2) {
;
L1126:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	tay
	txa
	adc     #>(_entities)
	tax
	tya
	ldy     #$04
	jsr     ldaidx
	sec
	sbc     #$FE
	bvc     L0F0C
	eor     #$80
L0F0C:	bpl     L0F09
;
; drawMetaSprite(entities[currentEntityId].x, entities[currentEntityId].y, pal, playerSpriteFrames[((FrameCount >> 3) & 0x01) + 2]);
;
	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     L0E38
	dey
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	ldx     #$00
	and     #$01
	clc
	adc     #$02
	bcc     L0F17
	inx
L0F17:	jsr     pushax
	lda     #$0D
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jmp     _drawMetaSprite
;
; drawMetaSprite(entities[currentEntityId].x, entities[currentEntityId].y, pal, playerSpriteFrames[((FrameCount >> 3) & 0x01)]);
;
L0F09:	jsr     decsp3
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     (sp),y
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     L0E38
	dey
	sta     (sp),y
	lda     _FrameCount
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	jsr     pusha0
	lda     #$0D
	jsr     tosmula0
	clc
	adc     #<(_playerSpriteFrames)
	tay
	txa
	adc     #>(_playerSpriteFrames)
	tax
	tya
	jmp     _drawMetaSprite

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; void loadPalette(const uint8_t *pal) {
;
	jsr     pushax
;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for ( i = 0; i < 32; ++i ) {
;
	sta     _i
	sta     _i+1
L0F2A:	lda     _i+1
	cmp     #$00
	bne     L0F31
	lda     _i
	cmp     #$20
L0F31:	bcs     L0F2B
;
; PPU.vram.data = pal[i];
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _i
	sta     ptr1
	txa
	adc     _i+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     $2007
;
; for ( i = 0; i < 32; ++i ) {
;
	inc     _i
	bne     L0F2A
	inc     _i+1
	jmp     L0F2A
;
; }
;
L0F2B:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; APU.status = 0x0F;
;
	lda     #$0F
	sta     $4015
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
L112D:	sta     _i
	sta     _i+1
L0F3D:	lda     _i+1
	cmp     #$00
	bne     L0F44
	lda     _i
	cmp     #$40
L0F44:	bcs     L0F3E
;
; sprites[i].y = 255;
;
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0F46
	inx
L0F46:	sta     _i
	stx     _i+1
	jmp     L0F3D
;
; bankswitch(1);
;
L0F3E:	lda     #$01
	jsr     _bankswitch
;
; loadPalette(titlePalette);
;
	lda     #<(_titlePalette)
	ldx     #>(_titlePalette)
	jsr     _loadPalette
;
; copyTitleScreen();
;
	jsr     _copyTitleScreen
;
; Scroll = 239;
;
	ldx     #$00
	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; timer = 0;
;
	txa
	sta     _timer
	sta     _timer+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; endLoop = 0;
;
	stx     _endLoop
;
; while (!endLoop) {
;
	jmp     L0F5C
;
; WaitFrame();
;
L0F5A:	jsr     _WaitFrame
;
; if(timer > 32) {
;
	lda     _timer
	cmp     #$21
	lda     _timer+1
	sbc     #$00
	bcc     L0F5F
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; PPU.vram.address = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU.vram.address = 0x0B;
;
	lda     #$0B
	sta     $2006
;
; PPU.vram.data = (((FrameCount >> 2) & 0x03) << 4) + 0x06;
;
	lda     _FrameCount
	lsr     a
	lsr     a
	and     #$03
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$06
	sta     $2007
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	sta     $2006
;
; if((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
	lda     _InputPort1
	and     #$10
	beq     L0F5C
	lda     _InputPort1Prev
	and     #$10
	bne     L0F5C
;
; endLoop = 1;
;
	lda     #$01
	sta     _endLoop
;
; } else {
;
	jmp     L0F5C
;
; ++timer;
;
L0F5F:	inc     _timer
	bne     L0F80
	inc     _timer+1
;
; if(Scroll > 0) 
;
L0F80:	lda     _Scroll
	ora     _Scroll+1
	beq     L0F81
;
; Scroll -= 16;
;
	lda     _Scroll
	sec
	sbc     #$10
	sta     _Scroll
	bcs     L0F81
	dec     _Scroll+1
;
; if(Scroll > 0x100)
;
L0F81:	lda     _Scroll
	cmp     #$01
	lda     _Scroll+1
	sbc     #$01
	bcc     L0F5C
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; while (!endLoop) {
;
L0F5C:	lda     _endLoop
	jeq     L0F5A
;
; WaitFrame();
;
	jsr     _WaitFrame
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_OFF;
;
	lda     #$08
	sta     $2000
;
; PPU.mask = 0;
;
	lda     #$00
	sta     $2001
;
; bankswitch(0);
;
	jsr     _bankswitch
;
; loadPalette(mapPalette);
;
	lda     #<(_mapPalette)
	ldx     #>(_mapPalette)
	jsr     _loadPalette
;
; initEntityList();
;
	jsr     _initEntityList
;
; fillBackground();
;
	jsr     _fillBackground
;
; playerId = popEntity(&freeEntityList);
;
	lda     #<(_freeEntityList)
	ldx     #>(_freeEntityList)
	jsr     _popEntity
	sta     _playerId
;
; pushEntity(playerId, &entityList);
;
	jsr     pusha
	lda     #<(_entityList)
	ldx     #>(_entityList)
	jsr     _pushEntity
;
; entities[playerId].x = 64;
;
	ldx     #$00
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$40
	ldy     #$02
	sta     (ptr1),y
;
; entities[playerId].y = 128;
;
	ldx     #$00
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$80
	iny
	sta     (ptr1),y
;
; entities[playerId].vx = 0;
;
	ldx     #$00
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].vy = 0;
;
	tax
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; entities[playerId].health = 8;
;
	tax
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$08
	iny
	sta     (ptr1),y
;
; entities[playerId].kind = 0;
;
	ldx     #$00
	lda     _playerId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	lda     #$00
	iny
	sta     (ptr1),y
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; Scroll = 0x108;
;
	ldx     #$01
	lda     #$08
	sta     _Scroll
	stx     _Scroll+1
;
; playerBlink = 0;
;
	lda     #$00
	sta     _playerBlink
;
; endLoop = 0;
;
	sta     _endLoop
;
; while (!endLoop) {
;
	jmp     L0FBD
;
; WaitFrame();
;
L0FBB:	jsr     _WaitFrame
;
; currentMetaSpriteId = BULLET_SPRITE - 1; // might be done in nmi?
;
	lda     #$37
	sta     _currentMetaSpriteId
;
; scrollIncrement = 0;
;
	lda     #$00
	sta     _scrollIncrement
;
; if(!(FrameCount & 0x01)) { // stop when mapCurrentLine == -1
;
	lda     _FrameCount
	ldx     #$00
	and     #$01
	jne     L1132
;
; if(Scroll > 0) {
;
	lda     _Scroll
	ora     _Scroll+1
	beq     L0FC7
;
; --Scroll;
;
	lda     _Scroll
	sec
	sbc     #$01
	sta     _Scroll
	bcs     L0FCB
	dec     _Scroll+1
;
; scrollIncrement = 1;
;
L0FCB:	lda     #$01
	sta     _scrollIncrement
;
; if(Scroll == 255) {
;
	lda     _Scroll+1
	bne     L0FD3
	lda     _Scroll
	cmp     #$FF
	bne     L0FD3
;
; } else {
;
	jmp     L1139
;
; Scroll = 256 + 239;
;
L0FC7:	inx
L1139:	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; if((Scroll & 0x0F) == 0x0F) {
;
L0FD3:	lda     _Scroll
	and     #$0F
	cmp     #$0F
	bne     L0FD6
;
; --mapCurrentLine;
;
	lda     _mapCurrentLine
	sec
	sbc     #$01
	sta     _mapCurrentLine
	bcs     L0FDB
	dec     _mapCurrentLine+1
;
; if(mapCurrentLine == 0xFFFF) {
;
L0FDB:	lda     _mapCurrentLine+1
	cmp     #$FF
	bne     L0FDC
	lda     _mapCurrentLine
	cmp     #$FF
	bne     L0FDC
;
; mapCurrentLine = mapLineCount - 1;
;
	lda     _mapLineCount
	ldx     _mapLineCount+1
	sec
	sbc     #$01
	bcs     L0FE1
	dex
L0FE1:	sta     _mapCurrentLine
	stx     _mapCurrentLine+1
;
; copyBgLine(map, mapCurrentLine);
;
L0FDC:	lda     #<(_map)
	ldx     #>(_map)
	jsr     pushax
	lda     _mapCurrentLine
	ldx     _mapCurrentLine+1
	jsr     _copyBgLine
;
; BGDestAddr = (Scroll > 240 ? 0x2800 : 0x2000) + (((Scroll & 0xFF) >> 4) << 6);
;
	lda     _Scroll
	cmp     #$F1
	lda     _Scroll+1
	sbc     #$00
	lda     #$00
	bcc     L0FE8
	ldx     #$28
	jmp     L1131
L0FE8:	ldx     #$20
L1131:	sta     ptr1
	stx     ptr1+1
	lda     _Scroll
	ldx     #$00
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     shlax4
	jsr     shlax2
	clc
	adc     ptr1
	sta     _BGDestAddr
	txa
	adc     ptr1+1
	sta     _BGDestAddr+1
;
; if(!(Scroll & 0x1F)) {
;
L0FD6:	lda     _Scroll
	ldx     #$00
	and     #$1F
	bne     L1132
;
; spawnKnight(FrameCount, 0);
;
	lda     _FrameCount
	jsr     pusha
	txa
	jsr     _spawnKnight
;
; currentEntityId = entityList;
;
	ldx     #$00
L1132:	lda     _entityList
	sta     _currentEntityId
;
; while(currentEntityId != 0xFF) {
;
	jmp     L1134
;
; uint8_t next = entities[currentEntityId].next;
;
L1133:	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
;
; switch(entities[currentEntityId].kind) {
;
	ldx     #$00
	lda     _currentEntityId
	jsr     aslax3
	clc
	adc     #<(_entities)
	sta     ptr1
	txa
	adc     #>(_entities)
	sta     ptr1+1
	ldy     #$07
	lda     (ptr1),y
;
; }
;
	beq     L1002
	cmp     #$01
	beq     L1005
	cmp     #$02
	beq     L1008
	cmp     #$03
	beq     L100B
	jmp     L1000
;
; playerUpdate();
;
L1002:	jsr     _playerUpdate
;
; break;
;
	jmp     L1000
;
; knightWalkUpdate();
;
L1005:	jsr     _knightWalkUpdate
;
; break;
;
	jmp     L1000
;
; fireUpdate();
;
L1008:	jsr     _fireUpdate
;
; break;
;
	jmp     L1000
;
; knightShootUpdate();
;
L100B:	jsr     _knightShootUpdate
;
; currentEntityId = next;
;
L1000:	ldy     #$00
	lda     (sp),y
	sta     _currentEntityId
;
; }
;
	jsr     incsp1
;
; while(currentEntityId != 0xFF) {
;
	ldx     #$00
L1134:	lda     _currentEntityId
	cmp     #$FF
	bne     L1133
;
; for(i = 0; i < 4; ++i) {
;
	txa
	sta     _i
	sta     _i+1
L1010:	lda     _i+1
	cmp     #$00
	bne     L1017
	lda     _i
	cmp     #$04
L1017:	bcs     L1011
;
; if(sprites[BULLET_SPRITE + i].y < 240) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L101D
	inx
L101D:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	cmp     #$F0
	bcs     L1012
;
; sprites[BULLET_SPRITE + i].y -= 4; 
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$38
	bcc     L1020
	inx
L1020:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$04
	sta     (ptr1),y
;
; for(i = 0; i < 4; ++i) {
;
L1012:	inc     _i
	bne     L1010
	inc     _i+1
	jmp     L1010
;
; for(i = 0; i < 4; ++i) {
;
L1011:	lda     #$00
	sta     _i
	sta     _i+1
L1022:	lda     _i+1
	cmp     #$00
	bne     L1029
	lda     _i
	cmp     #$04
L1029:	bcs     L1023
;
; if(sprites[ARROW_SPRITE + i].y <= 240) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$3C
	bcc     L102F
	inx
L102F:	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #<(_sprites)
	lda     (ptr1),y
	cmp     #$F1
	bcs     L1024
;
; sprites[ARROW_SPRITE + i].y += 2; 
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$3C
	bcc     L1032
	inx
L1032:	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; for(i = 0; i < 4; ++i) {
;
L1024:	inc     _i
	bne     L1022
	inc     _i+1
	jmp     L1022
;
; for(i = currentMetaSpriteId; i != 0; --i) {
;
L1023:	lda     _currentMetaSpriteId
	sta     _i
	lda     #$00
	sta     _i+1
L1034:	lda     _i
	ora     _i+1
	beq     L1035
;
; sprites[i].y = 240;
;
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; for(i = currentMetaSpriteId; i != 0; --i) {
;
	lda     _i
	sec
	sbc     #$01
	sta     _i
	bcs     L1034
	dec     _i+1
	jmp     L1034
;
; VRAMUpdateReady = 1;
;
L1035:	lda     #$01
	sta     _VRAMUpdateReady
;
; while (!endLoop) {
;
L0FBD:	lda     _endLoop
	jeq     L0FBB
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; WaitFrame();
;
	jsr     _WaitFrame
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_OFF;
;
	lda     #$08
	sta     $2000
;
; PPU.mask = 0;
;
	lda     #$00
	sta     $2001
;
; for(i = 0; i < 64; i++) {
;
	sta     _i
	sta     _i+1
L104C:	lda     _i+1
	cmp     #$00
	bne     L1053
	lda     _i
	cmp     #$40
L1053:	bcs     L104D
;
; sprites[i].y = 255;
;
	lda     _i
	ldx     _i+1
	jsr     aslax2
	clc
	adc     #<(_sprites)
	sta     ptr1
	txa
	adc     #>(_sprites)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L1055
	inx
L1055:	sta     _i
	stx     _i+1
	jmp     L104C
;
; bankswitch(1);
;
L104D:	lda     #$01
	jsr     _bankswitch
;
; loadPalette(titlePalette);
;
	lda     #<(_titlePalette)
	ldx     #>(_titlePalette)
	jsr     _loadPalette
;
; PPU.vram.address = 0x20;
;
	lda     #$20
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 32 * 30; i++) {
;
	sta     _i
	sta     _i+1
L1063:	lda     _i+1
	cmp     #$03
	bne     L106A
	lda     _i
	cmp     #$C0
L106A:	bcs     L1064
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 32 * 30; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L106C
	inx
L106C:	sta     _i
	stx     _i+1
	jmp     L1063
;
; PPU.vram.address = 0x28;
;
L1064:	lda     #$28
	sta     $2006
;
; PPU.vram.address = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(i = 0; i < 32 * 30; i++) {
;
	sta     _i
	sta     _i+1
L1076:	lda     _i+1
	cmp     #$03
	bne     L107D
	lda     _i
	cmp     #$C0
L107D:	bcs     L1077
;
; PPU.vram.data = 0x00;
;
	lda     #$00
	sta     $2007
;
; for(i = 0; i < 32 * 30; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L107F
	inx
L107F:	sta     _i
	stx     _i+1
	jmp     L1076
;
; PPU.vram.address = 0x23;
;
L1077:	lda     #$23
	sta     $2006
;
; PPU.vram.address = 0xC0;
;
	lda     #$C0
	sta     $2006
;
; for(i = 0; i < 64; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L1089:	lda     _i+1
	cmp     #$00
	bne     L1090
	lda     _i
	cmp     #$40
L1090:	bcs     L108A
;
; PPU.vram.data = 0xFF;
;
	lda     #$FF
	sta     $2007
;
; for(i = 0; i < 64; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L1092
	inx
L1092:	sta     _i
	stx     _i+1
	jmp     L1089
;
; PPU.vram.address = 0x22;
;
L108A:	lda     #$22
	sta     $2006
;
; PPU.vram.address = 0x0b;
;
	lda     #$0B
	sta     $2006
;
; for(i = 0; i < sizeof(gameOverText); i++) 
;
	lda     #$00
	sta     _i
	sta     _i+1
L109C:	lda     _i+1
	cmp     #$00
	bne     L10A4
	lda     _i
	cmp     #$0A
L10A4:	bcs     L109D
;
; PPU.vram.data = gameOverText[i];
;
	lda     #<(_gameOverText)
	sta     ptr1
	lda     #>(_gameOverText)
	clc
	adc     _i+1
	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     $2007
;
; for(i = 0; i < sizeof(gameOverText); i++) 
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L10A6
	inx
L10A6:	sta     _i
	stx     _i+1
	jmp     L109C
;
; Scroll = 239;
;
L109D:	ldx     #$00
	lda     #$EF
	sta     _Scroll
	stx     _Scroll+1
;
; timer = 0;
;
	txa
	sta     _timer
	sta     _timer+1
;
; VRAMUpdateReady = 1;
;
	lda     #$01
	sta     _VRAMUpdateReady
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_ON;
;
	lda     #$88
	sta     $2000
;
; endLoop = 0;
;
	stx     _endLoop
;
; while (!endLoop) {
;
	jmp     L10B8
;
; WaitFrame();
;
L10B6:	jsr     _WaitFrame
;
; if(timer > 32) {
;
	lda     _timer
	cmp     #$21
	lda     _timer+1
	sbc     #$00
	bcc     L10BB
;
; if((InputPort1 & BUTTON_START) && !(InputPort1Prev & BUTTON_START)) {
;
	lda     _InputPort1
	and     #$10
	beq     L10B8
	lda     _InputPort1Prev
	and     #$10
	bne     L10B8
;
; endLoop = 1;
;
	lda     #$01
	sta     _endLoop
;
; } else {
;
	jmp     L10B8
;
; ++timer;
;
L10BB:	inc     _timer
	bne     L10C7
	inc     _timer+1
;
; if(Scroll > 0) 
;
L10C7:	lda     _Scroll
	ora     _Scroll+1
	beq     L10C8
;
; Scroll -= 16;
;
	lda     _Scroll
	sec
	sbc     #$10
	sta     _Scroll
	bcs     L10C8
	dec     _Scroll+1
;
; if(Scroll > 0x100)
;
L10C8:	lda     _Scroll
	cmp     #$01
	lda     _Scroll+1
	sbc     #$01
	bcc     L10B8
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; while (!endLoop) {
;
L10B8:	lda     _endLoop
	beq     L10B6
;
; Scroll = 0;
;
	lda     #$00
	sta     _Scroll
	sta     _Scroll+1
;
; WaitFrame();
;
	jsr     _WaitFrame
;
; PPU.control = PPUCTRL_NAMETABLE_0 | PPUCTRL_INC_1_HORIZ | PPUCTRL_BPATTERN_0 | PPUCTRL_SPATTERN_1 | PPUCTRL_NMI_OFF;
;
	lda     #$08
	sta     $2000
;
; PPU.mask = 0;
;
	lda     #$00
	sta     $2001
;
; goto titleScreen;
;
	jmp     L112D

.endproc

